# TODO: set up headless service for 3 ports: api, ui, ssh
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "tiger.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "tiger.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tiger.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "tiger.fullname" . }}-whatisthis
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tiger.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
n      {{- end }}
      serviceAccountName: {{ include "tiger.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: dataloader
          securityContext:
            runAsUser: 1000
          image: gregoryg/sh-net-utils
          command: ["/bin/sh"]
          args: ["-c", "sudo chown -R 1000:1000 /home/tigergraph/mydata ; cd /home/tigergraph/mydata/; rm -v *.sh* *.csv*; wget 'https://gitcdn.link/repo/gregoryg/homelab/master/graph/tigergraph/charts/tiger/data/customer_data.tar.gz'; tar xf customer_data.tar.gz ; rm customer_data.tar.gz; wget 'https://gitcdn.link/repo/gregoryg/homelab/master/graph/tigergraph/charts/tiger/scripts/01-create-graph-zedlink.sh';wget 'https://gitcdn.link/repo/gregoryg/homelab/master/graph/tigergraph/charts/tiger/scripts/02-load-zedlink.sh'"]
          volumeMounts:
          - mountPath: {{ .Values.ingestVolume.mountPath | quote }}
            name: {{ .Values.ingestVolume.name  }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sleep", "24d"]
          # ports:
          #   - name: http
          #     containerPort: 80
          #     protocol: TCP
          livenessProbe:
            initialDelaySeconds: 300
            failureThreshold: 3
            timeoutSeconds: 2
            periodSeconds: 30
            tcpSocket:
              port: 9000
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - mountPath: {{ .Values.dataVolume.mountPath | quote }}
            name: {{ .Values.dataVolume.name  }}
          - mountPath: {{ .Values.ingestVolume.mountPath | quote }}
            name: {{ .Values.ingestVolume.name  }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.dataVolume.name }}
    spec:
      accessModes:
        - {{ .Values.dataVolume.accessMode | quote }}
    {{- if .Values.dataVolume.storageClass }}
    {{- if (eq "-" .Values.dataVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.dataVolume.storageClass }}"

      {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.dataVolume.size }}"
  - metadata:
      name: {{ .Values.ingestVolume.name  }}
    spec:
      accessModes:
        - {{ .Values.ingestVolume.accessMode | quote }}
    {{- if .Values.ingestVolume.storageClass }}
    {{- if (eq "-" .Values.ingestVolume.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.ingestVolume.storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.ingestVolume.size }}"
     # restartPolicy: Always
