USE GRAPH Customer360
PUT ExprFunctions FROM "/home/tigergraph/mydata/customer360/ExprFunctions.hpp"
PUT ExprUtil FROM "/home/tigergraph/mydata/customer360/ExprUtil.hpp"

CREATE QUERY categorySales(/* Parameters here */) FOR GRAPH Customer360 {
  TYPEDEF TUPLE <STRING categoryName, STRING salesDate, INT itemQty, DOUBLE SalesAmt> info;

  HeapAccum<info>(100, SalesAmt ASC, categoryName DESC) @@result;
  GroupByAccum<STRING categoryName, STRING salesDate, SumAccum<INT> itemQty, SumAccum<DOUBLE> SalesAmt> @@groupBy;
  MinAccum<STRING> @categoryName;
  MinAccum<STRING> @salesDate;
  SumAccum<INT>    @itemQty;
  SumAccum<DOUBLE> @itemSalesAmt;

  products = {Products.*};

  vCategory = SELECT s
                FROM products:s-(order_items:e)-Orders:t
               ACCUM s.@categoryName += s.category,
                     s.@salesDate += datetime_format(e.itemDate,"%Y-%m-%d"),
                     s.@itemQty += e.itemQty,
                     s.@itemSalesAmt += e.itemAmt
          POST-ACCUM @@groupBy += (s.@categoryName, s.@salesDate -> s.@itemQty, s.@itemSalesAmt);

  FOREACH c IN @@groupBy DO
    @@result += info(c.categoryName, c.salesDate, c.itemQty, c.SalesAmt);
  END;

  PRINT @@result;
}


INSTALL QUERY categorySales


CREATE QUERY similarCustomers(VERTEX source, STRING e_type, STRING rev_e_type, INT top_k = 100, BOOL print_accum = TRUE, STRING similarity_edge_type = "", STRING file_path = "") FOR GRAPH Customer360 {
/*
Calculates the Jaccard Similarity between a given vertex and every other vertex.
  Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
Parameters:
 source: start vertex                           top_k: #top scores to report
 e_type: directed edge types to traverse        print_accum: print JSON output
 rev_e_type: reverse edge types to traverse     file_path: file to write CSV output to
 similarity_edge_type: edge type for storing vertex-vertex similarity scores

  This query current supports only a single edge type (not a set of types) - 8/13/20
*/

  SumAccum<INT> @sum_intersection_size, @@sum_set_size_A, @sum_set_size_B;
  SumAccum<FLOAT> @sum_similarity;
  FILE f (file_path);

  Start (ANY) = {source};
  Start = SELECT s
              FROM Start:s
//	  ACCUM @@sum_set_size_A += s.outdegree(e_type);
             ACCUM @@sum_set_size_A += s.outdegree("movie_ratings"),
                 @@sum_set_size_A += @@sum_set_size_A + s.outdegree("book_ratings"),
                 @@sum_set_size_A += @@sum_set_size_A + s.outdegree("profile_sessions"),
                 @@sum_set_size_A += @@sum_set_size_A + s.outdegree("profile_purchase"),
                 @@sum_set_size_A += @@sum_set_size_A + s.outdegree("profile_campaign"),
                 @@sum_set_size_A += @@sum_set_size_A + s.outdegree("profile_response");

  Subjects = SELECT t
                 FROM Start:s-((movie_ratings|book_ratings|profile_sessions|profile_purchase):e)-:t;

  Others = SELECT t
               FROM Subjects:s -((movie_ratings|book_ratings|profile_sessions|profile_purchase):e)- :t
              WHERE t != source
              ACCUM t.@sum_intersection_size += 1,
                    t.@sum_set_size_B = t.outdegree("movie_ratings"),
                  t.@sum_set_size_B = t.@sum_set_size_B + t.outdegree("book_ratings"),
                  t.@sum_set_size_B = t.@sum_set_size_B + t.outdegree("profile_sessions"),
                  t.@sum_set_size_B = t.@sum_set_size_B + t.outdegree("profile_purchase"),
                  t.@sum_set_size_B = t.@sum_set_size_B + t.outdegree("profile_campaign"),
                  t.@sum_set_size_B = t.@sum_set_size_B + t.outdegree("profile_response")
         POST-ACCUM t.@sum_similarity = (t.@sum_intersection_size*1.0) / (@@sum_set_size_A + t.@sum_set_size_B - t.@sum_intersection_size)
           ORDER BY t.@sum_similarity DESC
              LIMIT top_k;

  IF file_path != "" THEN
      f.println("Vertex1", "Vertex2", "Similarity");
  END;

  Others = SELECT s
       FROM Others:s
       POST-ACCUM
//	       IF similarity_edge_type != "" THEN
//	           INSERT INTO EDGE similarity_edge_type VALUES (source, s, s.@sum_similarity)
//	       END,
           IF file_path != "" THEN
               f.println(source, s, s.@sum_similarity)
           END;

  IF print_accum THEN
      PRINT Others[Others.@sum_similarity];
  END;
}

INSTALL QUERY similarCustomers


CREATE QUERY productSalesAnalysis(STRING inDepartment, DATETIME inStartDate, DATETIME inEndDate) FOR GRAPH Customer360 {
/* Traditional BI Style Query that Runs a Product Sales Report
 * PARAMETERS: Department, StartDate, EndDate
 * Toys, 2020-01-01, 2020-12-31
 * Books, 2020-03-14, 2021-01-15
 * Health, 2020-01-15, 2020-10-10
*/
  TYPEDEF TUPLE <STRING deptName, STRING categoryName, STRING salesDate, INT itemQty, DOUBLE SalesAmt> info;

  HeapAccum<info>(200, SalesAmt ASC, deptName DESC) @@result;
  GroupByAccum<STRING deptName, STRING categoryName, STRING salesDate, SumAccum<INT> itemQty, SumAccum<DOUBLE> SalesAmt> @@count;
  MinAccum<STRING> @deptName;
  MinAccum<STRING> @categoryName;
  MinAccum<STRING> @salesDate;
  SumAccum<INT> @itemQty;
  SumAccum<DOUBLE> @itemSalesAmt;

  Start = {Products.*};

  vCategory = SELECT s
                FROM Start:s-(order_items:e)-Orders:t
               WHERE trim(BOTH s.department) == inDepartment AND
                     e.itemDate >= inStartDate AND
                     e.itemDate <= inEndDate
               ACCUM s.@deptName += s.department,
                     s.@categoryName += s.category,
                     s.@salesDate += datetime_format(e.itemDate,"%Y-%m-%d"),
                     s.@itemQty += e.itemQty,
                     s.@itemSalesAmt += e.itemAmt
          POST-ACCUM @@count += (s.@deptName, s.@categoryName, s.@salesDate -> s.@itemQty, s.@itemSalesAmt);

  FOREACH c IN @@count DO
 //   f.println(c.categoryName, c.salesDate, c.itemQty, c.SalesAmt);
    @@result += info(c.deptName, c.categoryName, c.salesDate, c.itemQty, c.SalesAmt);
  END;

  PRINT @@result;
}

INSTALL QUERY productSalesAnalysis

# entityResolution_sub must be created and installed prior to creating entityResolution_driver
CREATE QUERY entityResolution_sub(Vertex<Profile> inProfile, float threshold) FOR GRAPH Customer360 {
    SumAccum<float> @score;
    start = {inProfile};

  all_profiles = SELECT t FROM start-((profile_phone|profile_email|profile_ipaddress|profile_address|profile_device):e)-:t;

    similar_profiles = SELECT t FROM all_profiles-((profile_phone|profile_email|profile_ipaddress|profile_address|profile_device):e)-:t
                               WHERE t != inProfile
                                       ACCUM CASE e.type
                                                        WHEN "profile_phone"     THEN t.@score += 0.4
                                                        WHEN "profile_email"     THEN t.@score += 0.3
                                                        WHEN "profile_device"    THEN t.@score += 0.2
                                                        WHEN "profile_ipaddress" THEN t.@score += 0.1
                                                        WHEN "profile_address"   THEN t.@score += 0.5
                                                 END
                           POST-ACCUM
                                        CASE WHEN t.@score >= threshold THEN
                                       INSERT INTO same_profile VALUES (inProfile, t, t.@score)
                                          END;

 }

INSTALL QUERY entityResolution_sub

CREATE QUERY entityResolution_driver(FLOAT threshold) FOR GRAPH Customer360 {
/* Entity Resolution Driver
 * Query will Process all Profiles by passing the Profile_id to the sub Query
 * with a threshold parameter that will score the Entity Resolution rules
 * the sub-query will insert edge entries into the same_profile (Edge)
 * The first step of this query will delete all entries in the same_profile (Edge)
 * PARAMETERS threshold - defines match confidence level valid values are .5 to 1.5
 *
 * Print match groups with 3 or more profiles
*/
  ListAccum<VERTEX> @vertexList;
  ListAccum<EDGE> @edgeList;
  SumAccum<INT> @set_size;
  SetAccum<VERTEX<Profile>> @prfl_groups;

    all_profiles = {Profile.*};
    rm = SELECT s FROM all_profiles:s-(same_profile:e)-:t ACCUM delete(e);
    all_profiles = SELECT s FROM all_profiles:s ACCUM entityResolution_sub(s,threshold);

  Start = SELECT s FROM all_profiles:s-(same_profile:e)-:t
                  ACCUM s.@edgeList += e,
                        s.@vertexList += s,
                        s.@set_size += 1;

  x = SELECT s FROM Start:s WHERE s.@set_size >= 2;
  print x;

}

INSTALL QUERY entityResolution_driver


CREATE QUERY customerJourney(/* Parameters here */) FOR GRAPH Customer360 {
  /* Write query logic here */

  OrAccum @shop;
  OrAccum @cart;
  OrAccum @purchase;

  SumAccum <INT> @ordCount;
  SumAccum <DOUBLE> @ordAmount;
  MaxAccum <DATETIME> @lstPurch;
  MinAccum <DATETIME> @fstPurch;

  MapAccum<STRING, SetAccum<DATETIME>> @awareness;
  MapAccum<STRING, SetAccum<DATETIME>> @consider;
  MapAccum<STRING, SetAccum<DATETIME>> @purchases;
  MapAccum<STRING, STRING> @loyaltyRecency;
  MapAccum<STRING, STRING> @loyaltyFrequency;
  MapAccum<STRING, STRING> @loyaltyMonetary;

  Start = {Campaign.*};
  allEvents = {Events.*};
  allProds = {Products.*};

  ###################################################################
  # GroupBy Profile->PurchOrders  (profile, full_name, gender, ord_date, SUM(ord_qty) )
  ###################################################################
#  pOrders = SELECT t FROM Start:s-(profile_purchase)-Orders:t
#                    ACCUM t.@profileOrders += (s,s.profile_name, t.order_date, t.order_type ->1);

  acquire = SELECT t
              FROM Start:s-(profile_campaign:e)-Profile:t
             ACCUM CASE WHEN s.campaign_type == "Acquisition" THEN t.@awareness += ("Introduction"      -> e.campaign_date)
                        WHEN s.campaign_type == "Other"       THEN t.@awareness += ("Product Awareness" -> e.campaign_date)
                        WHEN s.campaign_type == "Special"     THEN t.@awareness += ("Brand Awareness"   -> e.campaign_date)
                   END;

  events = SELECT s
             FROM allEvents:s-(event_url:e)-urlPages:t
             ACCUM CASE WHEN t.page_location == "Cart"     THEN s.@shop     += True
                        WHEN t.page_location == "CheckOut" THEN s.@purchase += True
                        ELSE                                    s.@shop     += True
                   END;

  sess = SELECT t
             FROM events:s-(session_events:e)-Sessions:t
             ACCUM IF s.@shop     == True THEN t.@consider += ("Web Shop"     -> t.session_timestamp) END,
                   IF s.@cart     == True THEN t.@consider += ("Web Cart"     -> t.session_timestamp) END,
                   IF s.@purchase == True THEN t.@consider += ("Purchase Web" -> t.session_timestamp) END,
                                               t.@consider += ("Web Visit"    -> t.session_timestamp);

  sess2prof = SELECT t
                FROM sess:s-(profile_sessions:e)-Profile:t
               ACCUM t.@consider += s.@consider;

  orders = SELECT o
               FROM allProds:s-(order_items:e)-Orders:o
              ACCUM o.@ordAmount += e.itemAmt,
                    o.@ordCount += e.itemQty,
                    CASE WHEN s.department == "Personal Care"   OR s.department == "Health"  OR s.department == "Beauty" THEN o.@purchases += ("Personal Beaty & Health"  -> o.order_date)
                         WHEN s.department == "Clothing"        OR s.department == "Baby"    OR s.department == "Toys"   THEN o.@purchases += ("Clothes Baby and Toys"    -> o.order_date)
                         WHEN s.department == "Home and Garden" OR s.department == "Household Essentials"                THEN o.@purchases += ("Home and Household"       -> o.order_date)
                         WHEN s.department == "Auto and Tires"  OR s.department == "Sports and Outdoors"                 THEN o.@purchases += ("Auto Sports and Outdoors" -> o.order_date)
                    END;
  prof = SELECT t
           FROM orders:s-(profile_purchase:e)-Profile:t
               ACCUM t.@purchases += s.@purchases,
                     t.@lstPurch += s.order_date,
                     t.@fstPurch += s.order_date,
                     t.@ordAmount += s.@ordAmount,
                     t.@ordCount  += s.@ordCount;

  profiles = SELECT t FROM prof:t
              ACCUM  CASE WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 BETWEEN  0 AND  10 THEN t.@loyaltyRecency += ("Recency"  -> "10")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 BETWEEN 11 AND  30 THEN t.@loyaltyRecency += ("Recency"  -> "30")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 BETWEEN 31 AND  60 THEN t.@loyaltyRecency += ("Recency"  -> "60")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 BETWEEN 61 AND  90 THEN t.@loyaltyRecency += ("Recency"  -> "90")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 BETWEEN 91 AND 120 THEN t.@loyaltyRecency += ("Recency" -> "120")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24 > 121              THEN t.@loyaltyRecency += ("Recency" -> "999")
                     END,
                     CASE WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24  / t.@ordCount BETWEEN  0 AND  5 THEN t.@loyaltyFrequency += ("Frequency"  -> "5")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24  / t.@ordCount BETWEEN  6 AND 10 THEN t.@loyaltyFrequency += ("Frequency"  -> "10")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24  / t.@ordCount BETWEEN 11 AND 30 THEN t.@loyaltyFrequency += ("Frequency"  -> "30")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24  / t.@ordCount BETWEEN 31 AND 60 THEN t.@loyaltyFrequency += ("Frequency"  -> "60")
                          WHEN (datetime_diff(t.@lstPurch, t.@fstPurch) / 60 ) / 24  / t.@ordCount > 61              THEN t.@loyaltyFrequency += ("Frequency"  -> "999")
                     END,
                     CASE WHEN t.@ordAmount BETWEEN     0 AND  1000 THEN t.@loyaltyMonetary += ("Monetary"  ->  "1000")
                          WHEN t.@ordAmount BETWEEN  1001 AND  2000 THEN t.@loyaltyMonetary += ("Monetary"  ->  "2000")
                          WHEN t.@ordAmount BETWEEN  2001 AND  5000 THEN t.@loyaltyMonetary += ("Monetary"  ->  "5000")
                          WHEN t.@ordAmount BETWEEN  5001 AND 10000 THEN t.@loyaltyMonetary += ("Monetary"  -> "10000")
                          WHEN t.@ordAmount BETWEEN 10001 AND 20000 THEN t.@loyaltyMonetary += ("Monetary"  -> "20000")
                          WHEN t.@ordAmount > 20001                 THEN t.@loyaltyMonetary += ("Monetary"  -> "99999")
                     END;

  print profiles;

}

INSTALL QUERY customerJourney



CREATE QUERY connectionMining(vertex<Profile> A, vertex<Profile> B, int k) FOR GRAPH Customer360 {
  /***********************************
   * Variables for phase one
   ***********************************/
   SumAccum<int> @score = 0;
   OrAccum @knowA = false, @knowB = false;
   SetAccum<edge> @evidence, @@edgeSet;
   SetAccum<vertex> @@verSet;

   bool isFirstIter = true;

   L0 (ANY) = {A,B};

  /**************************
   * Iteration one
   * 1. find all person relates to A or B
   * 2. output top k people relates both A and B
   * Iteration two
   * 1. Start from the person knows only A or B
   * 2. Find those people who knows only A knows a person that knows only B
   * 3. Find those people who knows only B knows a person that knows only A
   * 4. output top k people from 2 and 3
   **************************/
   WHILE true LIMIT 3 DO
     // Data Initialize
     L0 = SELECT v
     FROM L0:v
     POST-ACCUM
       CASE WHEN v == A THEN
         v.@knowA += true
       END
       ,CASE WHEN v == B THEN
         v.@knowB += true
       END
       ,v.@score = 1
     ;

      L1 (ANY) = L0;

    // do it twice, go two steps to find the related citizens via
    // hotel, flight, train, bus, case
    log(true, " email, phone, address, ipaddress, device");
    WHILE true LIMIT 3 DO
      L1 = SELECT t
           FROM L1:s-((profile_email|profile_phone|profile_ipaddress|profile_address|profile_device):e)-:t
           WHERE t.@score == 0
           ACCUM t.@knowA += s.@knowA
                 ,t.@knowB += s.@knowB
                 ,t.@score += s.@score
                 ,t.@evidence += s.@evidence
                 ,t.@evidence += e
      ;
      //print A;
    END;

    RELATED = L1;
    L1 = L0;

    // go 4 steps,
    // A/B-->PHONE NUMBER-->PHONE CALL-->PHONE NUMBER-->RELATED PEOPLE
    // A/B-->BANK ACCOUNT-->MONEY TRANS-->BANK ACCOUNT-->RELATED PEOPLE
    log(true, "Purchae, Book, Movie");
    L1 = SELECT t
           FROM L1:s-((profile_purchase|book_ratings|movie_ratings):e)-:t
           WHERE t.@score == 0
           ACCUM t.@knowA += s.@knowA
                 ,t.@knowB += s.@knowB
                 ,t.@score += s.@score
                 ,t.@evidence += s.@evidence
                 ,t.@evidence += e
    ;
//    WHILE true LIMIT 3 DO
//      L1 = SELECT t
//           FROM L1:s-((profile_email|profile_phone|profile_ipaddress|profile_address|profile_device):e)-:t
//           WHERE t.@score == 0
//           ACCUM t.@knowA += s.@knowA
//                 ,t.@knowB += s.@knowB
//                 ,t.@score += s.@score
//                 ,t.@evidence += s.@evidence
//                 ,t.@evidence += e
//      ;
//    END;
    L1 = SELECT t
           FROM L1:s-((profile_purchase|book_ratings|movie_ratings):e)-:t
           WHERE t.@score == 0
           ACCUM t.@knowA += s.@knowA
                 ,t.@knowB += s.@knowB
                 ,t.@score += s.@score
                 ,t.@evidence += s.@evidence
                 ,t.@evidence += e
    ;


    // add the newly found citizens to the related set
    RELATED = RELATED UNION L1;

    log(true, "get COMMON_AB");
    // Extract the people having common relations
    // and keep the top k
    COMMON_AB = SELECT t
         FROM RELATED:t
         WHERE t.@knowA == true AND t.@knowB == true
         ORDER BY t.@score
         LIMIT k
    ;

    COMMON_AB = SELECT s from COMMON_AB:s
                ACCUM @@edgeSet += s.@evidence
    ;

    IF isFirstIter == true THEN
      // find the person that knows only A or B
      L0 = RELATED MINUS COMMON_AB;
            log(true,L0.size());
    END;
    isFirstIter = false;
  END;

  PRINT @@edgeSet;
  getVertexesFromEdge(@@edgeSet, @@verSet);
  Start = {@@verSet};
  Start = SELECT s FROM Start:s
          POST-ACCUM s.@evidence.clear();

  PRINT Start;
}

INSTALL QUERY connectionMining



CREATE QUERY movieRecommendations(String v_type, String e_type,FLOAT max_change=0.001, INT max_iter=25, FLOAT damping = 0.85, INT topK = 100, INT numberOfBatch, INT batchID ) FOR GRAPH Customer360  RETURNS (MapAccum<VERTEX, SetAccum<VERTEX>>) {

  TYPEDEF TUPLE<VERTEX ver, FLOAT score> Vertex_Score;
  HeapAccum<Vertex_Score>(topK,score DESC) @topScores;
  MapAccum<Vertex,ListAccum<Vertex_Score>> @@res;
  MaxAccum<FLOAT> @@maxDiff = 9999; # max score change in an iteration
  MapAccum<VERTEX,FLOAT> @received_score; # sum of scores each vertex receives FROM neighbors
  MapAccum<VERTEX,FLOAT> @score ;   # Initial score for every vertex is 0
  SetAccum<EDGE> @@edgeSet;                   # list of all edges, if display is needed
  OrAccum @is_source;
  SetAccum<INT> @@end;
  SetAccum<VERTEX> @@allProducts;
  MapAccum<VERTEX, SetAccum<VERTEX>> @@recommendation;

  All = {v_type};#  All with a set of input vertices

  All = SELECT s
          FROM All:s
          WHERE getvid(s) % numberOfBatch == batchID;
  # Assign unique labels to each vertex
  Start = SELECT s
          FROM All:s
          POST-ACCUM s.@score +=(s->1),   # Only set score of source vertices to 1
                     s.@is_source = true;
  Total = All;

  WHILE @@maxDiff > max_change LIMIT max_iter DO
         V_tmp = SELECT t      # Only update score for activated vertices
                 FROM Start:s -(e_type:e)-> :t
//                 WHERE (s.type == "person" AND e.timestamp <= s.timestamp) OR
//                       (s.type == "product" AND e.timestamp <= t.timestamp)
                 ACCUM
                      FOREACH (key,value) IN s.@score DO
                          IF getvid(key) in @@end THEN
                                continue
                          END,
                          FLOAT rec_score = value/s.outdegree(e_type),#/(s.outdegree(e_type);
                          t.@received_score += (key->rec_score)
                      END;
            T = Start UNION V_tmp;
            Start = SELECT s
                    FROM T:s
                    POST-ACCUM
                        IF s.@is_source == TRUE THEN
                              FLOAT oldscore = s.@score.get(s),
                              s.@score+=(s->-oldscore),
                              s.@score+=(s->((1.0-damping) + damping *s.@received_score.get(s)))
                        END,
                        FOREACH (key,value) IN s.@received_score DO
                            IF key!=s THEN
                                FLOAT oldscore = s.@score.get(key),
                                s.@score+=(key->-oldscore),
                                s.@score+=(key->damping*value),
                                IF damping*value-oldscore<0.001 THEN
                                    @@end+=getvid(key)
                                END
                            END
                         END,
                         IF s.type == "Movies" THEN
                             @@allProducts += s
                         END,
                         s.@received_score.clear();

            Total=Total UNION T;
            END;

    Total = SELECT s
            FROM Total:s
            POST-ACCUM
                  FOREACH (key,value) IN s.@score DO
                      @@res+=(key->Vertex_Score(s,value))
                      END,
                      s.@score.clear(),s.@received_score.clear();
    @@end.clear();
   PRINT @@res;
    All = SELECT s
          FROM All:s - (e_type:e)-:t
          ACCUM
                 FOREACH i in @@res.get(s) DO
                      IF @@allProducts.contains(i.ver) AND getvid(i.ver) != getvid(t) THEN
                        s.@topScores+=i
                      END
                  END;

    All = SELECT s
          FROM All:s
          POST-ACCUM
                  FOREACH element IN s.@topScores DO
                      @@recommendation += (s -> element.ver)
                  END;
        //PRINT All [All.@topScores];
      RETURN @@recommendation;
}

INSTALL QUERY movieRecommendations


CREATE QUERY productRecommendation_personalized(VERTEX <Profile> inputProfile) FOR GRAPH Customer360 {
  /***********************************************
   * Product Recommendation for each profile
   * PARAMETERS Profile_id any value between 1 and 50000
*/

  SumAccum<int> @ProdInCommon;
  SumAccum<float> @SimilarityScore;
  SumAccum<float> @Rank;
  OrAccum @Purchased = false;

  start = {inputProfile};
  allprods = {Products.*};

  #1. mark Products Purchased by the Profile
  #2. calculate log similarity score for each persons share the same interests at Tag level.
  orders = SELECT o FROM start:s-(profile_purchase:e)-Orders:o
            WHERE s == inputProfile;
  #print orders;

  products = SELECT p FROM orders:s-(order_items:e)-Products:p
              ACCUM p.@Purchased = true,
                    p.@ProdInCommon += 1
         POST-ACCUM p.@SimilarityScore = log (1 + p.@ProdInCommon);

  #print products;


  # recommend new messages to Viktor that have not liked by him.
  Recommendations = SELECT p FROM allprods:p
                     WHERE p.@Purchased == false
                     ACCUM p.@Rank += p.@SimilarityScore
                  ORDER BY p.@Rank DESC
             LIMIT 10;

  print Recommendations;

}

INSTALL QUERY productRecommendation_personalized




CREATE QUERY bookRecommendation(VERTEX <Profile> inputProfile) FOR GRAPH Customer360 {
  /***********************************************
   * Product Recommendation for each profile
   * PARAMETERS Profile_id any value between 1 and 50000
*/

  SumAccum<int> @BookInCommon;
  SumAccum<float> @SimilarityScore;
  SumAccum<float> @Rank;
  OrAccum @Read = false;

  start = {inputProfile};
  allBooks = {Books.*};

  #1. mark Products Purchased by the Profile
  #2. calculate log similarity score for each persons share the same interests at Tag level.
  books =  SELECT b FROM start:s-(book_ratings:e)-Books:b
            WHERE s == inputProfile;
  #print orders;

  booksRead = SELECT b FROM start:s-(book_ratings:e)-Books:b
              ACCUM b.@Read = true,
                    b.@BookInCommon += 1
         POST-ACCUM b.@SimilarityScore = log (1 + b.@BookInCommon);

  #print products;


  # recommend new messages to Viktor that have not liked by him.
  Recommendations = SELECT p FROM allBooks:p
                     WHERE p.@Read == false
                     ACCUM p.@Rank += p.@SimilarityScore
                  ORDER BY p.@Rank DESC
             LIMIT 10;

  print Recommendations;

}

INSTALL QUERY bookRecommendation

CREATE QUERY bestCustomers(/* Parameters here */) FOR GRAPH Customer360 {
  TYPEDEF TUPLE<VERTEX<Profile> profile, STRING last_name, STRING first_name, STRING gender, INT ord_cnt, DOUBLE ord_qty, DOUBLE ord_amt> profile;

  SumAccum<INT> @ordCnt;
  SumAccum<INT> @ordQty;
  SumAccum<DOUBLE> @ordAmt;
  OrAccum @visited;
  HeapAccum<profile>(100, ord_cnt DESC, ord_amt DESC) @@profileTop;

  Start = { Profile.* };

  vPersonHasOrder = SELECT s FROM Start:s-(profile_purchase:e)-Orders:t
                     ACCUM s.@visited += True,
                           s.@ordCnt += 1,
                           s.@ordQty += t.order_qty,
                           s.@ordAmt += t.order_amt
                POST-ACCUM @@profileTop += profile(s, s.last_name, s.first_name, s.gender, s.@ordCnt, s.@ordQty, s.@ordAmt)
                    LIMIT 100;

  PRINT @@profileTop;
}

INSTALL QUERY bestCustomers



CREATE QUERY community_step1_jaccard_batch ( INT top_k = 10, SET<STRING> v_type, SET<STRING> feat_v_type, SET<STRING> e_type, SET<STRING> re_type, INT src_batch_num = 50, INT nbor_batch_num = 10, BOOL print_accum = true, INT print_limit = 50, STRING file_path = "") FOR GRAPH Customer360 {
  /*
    Calculates the Jaccard Neighborhood Similarity between all vertices using a common feature vertex type.
      Jaccard Similarity = intersection_size / (setSize_all + setSize_self - intersection_size)

    Parameters :
      top_k   : # of top scores to report for each vertex
      v_type  : vertex type to compare
      feat_v_type  : feature vertex type
      e_type  : edge type from source vertex to feature vertex type
      re_type  : edge type from feature vertex to source vertex
      similarity_edge : edge type for storing vertex-vertex similarity scores
      src_batch_num  : how many batches to split the source vertices into
      nbor_batch_num : how many batches to split the 2-hop neighbor vertices into
      print_accum : print JSON output
      print_limit : number of source vertices to print, -1 to print all
      file_path : file to write CSV output to
  */

  TYPEDEF TUPLE<VERTEX <Profile> ver, FLOAT val> Res_Tup; // storing results in the Heap
  MapAccum<VERTEX <Profile>, INT> @@set_size_map, @intersection_size_map; // set sizes of all vertices
  SetAccum<STRING> @@all_e_types_set;
  SumAccum<FLOAT> @sum_outdegree;
  HeapAccum<Res_Tup>(top_k, val DESC) @sim_heap; // stores topK similarity results
  FILE f (file_path);
  INT print_count;

  all_vertices = {Profile.*};
  all_vertices = SELECT s
                 FROM all_vertices:s -(e_type:e)- feat_v_type:t
                 ACCUM
                     s.@sum_outdegree += 1;

  FOREACH i IN RANGE[0, src_batch_num-1] DO
      // store number of features for each source vertex
      src_batch = SELECT s
                  FROM all_vertices:s
                  WHERE getvid(s) % src_batch_num == i
                  ACCUM
                      @@set_size_map += (s -> s.@sum_outdegree);

      // store number of source vertices that share common features
      common_features = SELECT t
                        FROM src_batch:s-(e_type:e)-feat_v_type:t
                        ACCUM t.@intersection_size_map += (s -> 1);

      FOREACH j IN RANGE[0, nbor_batch_num-1] DO
          others = SELECT t
                   FROM common_features:s-(re_type:e)-Profile:t
                   WHERE getvid(t) % nbor_batch_num == j
                   ACCUM
                       t.@intersection_size_map += s.@intersection_size_map;
          others = SELECT s
                   FROM others:s
                   ACCUM
                       // perform similarity computation and store results
                       FLOAT div = 0,
                       FOREACH (k,v) IN s.@intersection_size_map DO
                           IF k == s THEN
                               CONTINUE
                           END,
                           div = @@set_size_map.get(k) + s.@sum_outdegree - v,
                           IF div > 0 THEN
                               k.@sim_heap += Res_Tup(s, v/div)
                           END
                       END
                   POST-ACCUM
                       s.@intersection_size_map.clear();
      END;

      IF print_accum == TRUE THEN
          IF print_limit == -1 THEN
              PRINT src_batch[src_batch.@sim_heap];
          ELSE
              IF print_count < print_limit THEN
                  print_batch = SELECT s
                                FROM src_batch:s
                                LIMIT print_limit - print_count;
                  print_count = print_count + src_batch.size();
                  PRINT print_batch[print_batch.@sim_heap];
              END;
          END;
      END;

      src_batch = SELECT s
                  FROM src_batch:s
                  POST-ACCUM
                      FOREACH tup IN s.@sim_heap DO
                          IF file_path != "" THEN
                              f.println(s, tup.ver, tup.val)
                          END,
                          INSERT INTO EDGE community_edge VALUES (s, tup.ver, tup.val)
                      END,
                      s.@sim_heap.clear();
                      @@set_size_map.clear();
  END;
}



CREATE QUERY community_step2_label_prop (SET<STRING> v_type, SET<STRING> e_type, INT max_iter, INT output_limit, BOOL print_accum = TRUE, STRING file_path = "", STRING attr = "") FOR GRAPH Customer360 {
# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

OrAccum @@or_changed = true;
MapAccum<INT, INT> @map;     # <communityId, numNeighbors>
MapAccum<INT, INT> @@comm_sizes_map;   # <communityId, members>
SumAccum<INT> @sum_label, @sum_num;
FILE f (file_path);
Start = {v_type};

# Assign unique labels to each vertex
Start = SELECT s
        FROM Start:s
        ACCUM s.@sum_label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
WHILE @@or_changed == true LIMIT max_iter DO
    @@or_changed = false;
    Start = SELECT s
            FROM Start:s -(e_type:e)-> :t
            ACCUM t.@map += (s.@sum_label -> 1)  # count the occurrences of neighbor's labels
            POST-ACCUM
                INT max_v = 0,
                INT label = 0,
                # Iterate over the map to get the neighbor label that occurs most often
                FOREACH (k,v) IN t.@map DO
                    CASE WHEN v > max_v THEN
                        max_v = v,
                        label = k
                    END
                END,
                # When the neighbor search finds a label AND it is a new label
                # AND the label's count has increased, update the label.
                CASE WHEN label != 0 AND t.@sum_label != label AND max_v > t.@sum_num THEN
                    @@or_changed += true,
                    t.@sum_label = label,
                    t.@sum_num = max_v
                END,
                t.@map.clear();
END;

Start = {v_type};
Start =  SELECT s
         FROM Start:s
         POST-ACCUM
             IF attr != "" THEN
                 s.setAttr(attr, s.@sum_label)
             END,

             IF file_path != "" THEN
                 f.println(s, s.@sum_label)
             END,

             IF print_accum THEN
                 @@comm_sizes_map += (s.@sum_label -> 1)
             END
         LIMIT output_limit;

IF print_accum THEN
    PRINT @@comm_sizes_map;
    PRINT Start[Start.@sum_label];
END;
}

INSTALL QUERY community_step1_jaccard_batch
INSTALL QUERY community_step2_label_prop



CREATE QUERY deleteCust360_data(/* Parameters here */) FOR GRAPH Customer360 {
  brow = {Browser.*};
  DELETE v FROM brow:v;

  dasr = {DataSource.*};
  DELETE v FROM dasr:v;

  camp = {Campaign.*};
  DELETE v FROM camp:v;

  ad = {Ads.*};
  DELETE v FROM ad:v;

  prom = {Promotions.*};
  DELETE v FROM prom:v;

  loc = {Location.*};
  DELETE v FROM loc:v;

  urlp = {urlPages.*};
  DELETE v FROM urlp:v;

  even = {Events.*};
  DELETE s FROM even:s;

  sess = {Sessions.*};
  DELETE s FROM sess:s;

  ordr = {Orders.*};
  DELETE s FROM ordr:s;

  prof = {Profile.*};
  DELETE s FROM prof:s;

  devc = {Device.*};
  DELETE s FROM devc:s;

  emai = {Email.*};
  DELETE s FROM emai:s;

  phon = {Phone.*};
  DELETE s FROM phon:s;

  ipad = {IpAddress.*};
  DELETE s FROM ipad:s;

  addr = {Address.*};
  DELETE v FROM addr:v;

  book = {Books.*};
  DELETE v FROM book:v;

  movi = {Movies.*};
  DELETE v FROM movi:v;

  genr = {Genre.*};
  DELETE v FROM genr:v;

  publ = {Publisher.*};
  DELETE v FROM publ:v;

  auth = {Author.*};
  DELETE v FROM auth:v;

  prod = {Products.*};
  DELETE v FROM prod:v;

  stor = {Store.*};
  DELETE v FROM stor:v;

  usag = {UserAgent.*};
  DELETE v FROM usag:v;


}

INSTALL QUERY deleteCust360_data
