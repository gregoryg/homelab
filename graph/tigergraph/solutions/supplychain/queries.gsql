set exit_on_error = "true"
CREATE QUERY scc (SET<STRING> v_type, SET<STRING> e_type, SET<STRING> rev_e_type,
  INT top_k_dist, INT output_limit, INT max_iter = 500, INT iter_wcc = 5, BOOL print_accum = TRUE, STRING result_attr= "", STRING file_path=""){ //INT iter_end_trim = 3
/* This query detects strongly connected components based on the following papers:
 * https://www.sandia.gov/~apinar/papers/irreg00.pdf
 * https://www.sciencedirect.com/science/article/pii/S0743731505000535
 * https://stanford-ppl.github.io/website/papers/sc13-hong.pdf

 * iter: number of iteration of the algorithm
 * iter_wcc: find weakly connected components for the active vertices in this iteration, since the largest sccs are already found after several iterations; usually a small number(3 to 10)
 * top_k_dist: top k result in scc distribution

 * DISTRIBUTED QUERY mode for this query is supported from TG 2.4.
 */
    TYPEDEF TUPLE <INT csize, INT num> cluster_num;
    MapAccum<INT, INT> @@cluster_size_map, @@cluster_dist_map;
    HeapAccum<cluster_num>(top_k_dist, csize DESC) @@cluster_dist_heap;
    OrAccum @is_forward, @is_backward, @detached, @has_pos_indegree, @has_pos_outdegree, @wcc_active;
    SumAccum<INT> @cid, @vid;
    MinAccum<INT> @@min_vid, @wcc_id_curr, @wcc_id_prev;
    SumAccum<STRING> @flag;
    MapAccum<INT, MinAccum<INT>> @@f_cid_map, @@b_cid_map, @@n_cid_map, @@s_cid_map;
    FILE f (file_path);
    INT i = 1;
    v_all = {v_type};
    tmp(ANY) ={};

    active = SELECT s
            FROM v_all:s
            ACCUM s.@vid = getvid(s),
                  @@min_vid += getvid(s)
            POST-ACCUM s.@cid = @@min_vid;

    WHILE active.size()>0 LIMIT max_iter DO

        WHILE TRUE DO
            tmp =  SELECT s
                   FROM active:s -(e_type:e) -> :t
                   WHERE t.@detached == FALSE AND s.@cid == t.@cid
                   ACCUM s.@has_pos_outdegree = TRUE;

            tmp =  SELECT s
                   FROM active:s -(rev_e_type:e) -> :t
                   WHERE t.@detached == FALSE AND s.@cid == t.@cid
                   ACCUM s.@has_pos_indegree = TRUE;
            trim_set = SELECT s
                   FROM active:s
                   WHERE s.@has_pos_indegree == FALSE OR s.@has_pos_outdegree == FALSE
                   ACCUM s.@detached = TRUE,
                         s.@cid = s.@vid;


            IF trim_set.size() == 0 THEN  // no single SCC anymore, terminate the while loop
                    BREAK;
            END;
            active = SELECT s
                     FROM active:s
                     WHERE s.@detached == FALSE
                     ACCUM @@n_cid_map += (s.@cid -> s.@vid)
                     POST-ACCUM s.@cid = @@n_cid_map.get(s.@cid),
                                s.@has_pos_indegree = FALSE,
                                s.@has_pos_outdegree = FALSE;
            @@n_cid_map.clear();
        END;
        //END;
        // get WCC
        IF i == iter_wcc THEN
                active = SELECT s
                         FROM active:s
                         POST-ACCUM s.@wcc_id_curr = s.@vid,
                                    s.@wcc_id_prev = s.@vid;
                curr = active;
                WHILE (curr.size()>0) DO
                        curr = SELECT t
                               FROM curr:s -((e_type|rev_e_type):e)-> :t
                               WHERE s.@cid == t.@cid AND t.@detached == FALSE
                               ACCUM t.@wcc_id_curr += s.@wcc_id_prev // If s has a smaller id than t, copy the id to t
                               POST-ACCUM
                                        CASE WHEN t.@wcc_id_prev != t.@wcc_id_curr THEN // If t's id has changed
                                                  t.@wcc_id_prev = t.@wcc_id_curr,
                                                  t.@wcc_active = true
                                        ELSE
                                                  t.@wcc_active = false
                                        END
                                HAVING t.@wcc_active == true;
                END;
                active = SELECT s
                         FROM active:s
                         ACCUM s.@cid = s.@wcc_id_curr;
        END;
        i = i + 1;

        pivots = SELECT s
                 FROM active:s
                 WHERE s.@cid == s.@vid
                 ACCUM s.@is_forward = TRUE,
                       s.@is_backward = TRUE;

        // mark forward set
        curr = pivots;
        WHILE curr.size()>0 DO
            curr = SELECT t
                   FROM curr:s -(e_type:e)->:t  // edge
                   WHERE t.@detached == FALSE AND t.@is_forward == FALSE AND s.@cid == t.@cid // not traversed
                   ACCUM t.@is_forward = TRUE;
        END;

        // mark backward set
        curr = pivots;
        WHILE curr.size()>0 DO
            curr = SELECT t
                   FROM curr:s -(rev_e_type:e)->:t  // reverse edge
                   WHERE t.@detached == FALSE AND t.@is_backward == FALSE AND s.@cid == t.@cid // not traversed
                   ACCUM t.@is_backward = TRUE;
        END;

        active =
            SELECT s
            FROM active:s
            ACCUM IF s.@is_forward == TRUE AND s.@is_backward == TRUE THEN  // scc
                       s.@detached = TRUE,
                       @@s_cid_map += (s.@cid -> s.@vid)
               ELSE IF s.@is_forward == TRUE THEN  // forward set
                    @@f_cid_map += (s.@cid -> s.@vid)
                ELSE IF s.@is_backward == TRUE THEN    // backward set
                    @@b_cid_map += (s.@cid -> s.@vid)
                ELSE
                    @@n_cid_map += (s.@cid -> s.@vid)   // null set
                END
                POST-ACCUM IF s.@is_forward == TRUE AND s.@is_backward == TRUE THEN //scc
                        s.@cid = @@s_cid_map.get(s.@cid)
                    END,
                    IF s.@is_forward == TRUE THEN
                        IF s.@is_backward == FALSE THEN   // forward set
                             s.@cid = @@f_cid_map.get(s.@cid)
                        END
                     ELSE
                        IF s.@is_backward == TRUE THEN    // backward set
                             s.@cid = @@b_cid_map.get(s.@cid)
                        ELSE                              // null set
                             s.@cid = @@n_cid_map.get(s.@cid)
                        END
                    END,
                    s.@is_forward = FALSE,
                    s.@is_backward = FALSE
                HAVING s.@detached == FALSE;

        @@s_cid_map.clear();
        @@f_cid_map.clear();
        @@b_cid_map.clear();
        @@n_cid_map.clear();
    END;

    // result
    v_all = SELECT s
            FROM v_all:s
            POST-ACCUM @@cluster_size_map += (s.@cid -> 1);

    FOREACH (cid, csize) IN @@cluster_size_map DO
    @@cluster_dist_map += (csize -> 1);
    END;
    FOREACH (csize, number) IN @@cluster_dist_map DO
    @@cluster_dist_heap += cluster_num(csize, number);
    END;
    PRINT @@cluster_dist_heap;

    IF file_path != "" THEN
        f.println("Vertex_ID","Component_ID");
    END;

    v_all = SELECT s
            FROM v_all:s
            POST-ACCUM
            IF result_attr != "" THEN s.setAttr(result_attr, s.@cid) END,
            IF file_path != "" THEN f.println(s, s.@cid) END
            LIMIT output_limit;

    IF print_accum THEN
        PRINT v_all[v_all.@cid];
    END;
}
CREATE DISTRIBUTED QUERY louvain_distributed_vf(SET<STRING> v_type, SET<STRING> e_type, STRING wt_attr, INT max_iter = 10, FLOAT tolerence = 0.0001) FOR GRAPH SupplyChain {
    TYPEDEF TUPLE <FLOAT deltaQ, FLOAT weight, VERTEX cc> move;
    MapAccum<VERTEX, SumAccum<INT>> @@communityMap;
    MapAccum<INT, SumAccum<INT>> @@communitySizeCount;
    SetAccum<INT> @@communitySet;
    SumAccum<FLOAT> @ac; #sum of the degrees of all the vertices in community C of the vertex
    ListAccum<VERTEX> @cc; #the community center
    SumAccum<FLOAT> @weight; # total weight incident to this vertex
    SumAccum<FLOAT> @ccWeight; # total weight incident to the cc vertex
    MapAccum<VERTEX,SumAccum<FLOAT>> @A; #A[c]: sum of the edge weights for the edges in community c
    MaxAccum<move> @best_move; # highest dQ, highest -Outdegree, highest cc
    ListAccum<VERTEX> @cm;  #community member list
    SumAccum<FLOAT> @@m; # total edge weight
    SumAccum<INT> @outdegree;   # helper variable for outdegree calculation
    SumAccum<INT> @@ccChange;
    String date;

    file f1 ("/home/tigergraph/results.csv");
    f1.println("VertexType,primaryID,communityID");

    // initialize
    Start = {v_type};
    Start = SELECT s FROM Start:s -(e_type:e)- :t
        ACCUM
            @@m += /*e.getAttr(wt_attr,"INT")**/0.5,
            s.@weight += /*e.getAttr(wt_attr,"INT")**/1.0,
            s.@ccWeight += /*e.getAttr(wt_attr,"INT")**/1.0,
            s.@outdegree += 1
        POST-ACCUM
            IF s.@outdegree > 1 THEN s.@cc += s END;
    PRINT Start.size() AS AllVertexCount;
    // special @cc update in the first iteration
    Start = SELECT t FROM Start:s -(e_type:e)- :t
        WHERE s.@outdegree > 1 AND t.@outdegree > 1
        ACCUM
            t.@best_move += move(/*e.getAttr(wt_attr,"INT")**/1.0 + @@m*t.@weight * (t.@weight - s.@weight), -s.@ccWeight, s.@cc.get(0))
        POST-ACCUM
            IF getDeltaQ(t.@best_move) > 0 THEN
                IF -getWeight(t.@best_move) < t.@ccWeight THEN
                    t.@cc.clear(),
                    t.@cc += getCc(t.@best_move),
                    t.@ccWeight = -getWeight(t.@best_move),
                    @@ccChange += 1
                ELSE
                    IF -getWeight(t.@best_move) == t.@ccWeight AND getvid(t) < getvid(getCc(t.@best_move))  THEN
                        t.@cc.clear(),
                        t.@cc += getCc(t.@best_move),
                        t.@ccWeight = -getWeight(t.@best_move),
                        @@ccChange += 1
                    END
                END
            END;
    PRINT @@ccChange AS InitChangeCount;

    // main loop
    WHILE @@ccChange > 0 LIMIT max_iter DO
        // initialize for iteration
        @@ccChange = 0;
        Start = SELECT s FROM Start:s
            WHERE s.@outdegree > 1
            POST-ACCUM
                s.@ac = 0,
                s.@cm.clear(),
                s.@A.clear();
        Start = SELECT s FROM Start:s
            ACCUM
                FOREACH v IN s.@cc DO
                    CASE WHEN getvid(v) != -1 THEN v.@cm += s END
                END;
        Start = SELECT s FROM Start:s -(e_type:e)- :t
            WHERE t.@outdegree > 1
            ACCUM s.@A += (t.@cc.get(0) -> /*e.getAttr(wt_attr,"INT")**/1.0);
        Start = SELECT s FROM Start:s
            ACCUM
                FOREACH v IN s.@cc DO
                    CASE WHEN getvid(v) != -1 THEN v.@ac += s.@weight END
                END;
        Start = SELECT s FROM Start:s
            ACCUM
                FOREACH v IN s.@cm DO
                    CASE WHEN getvid(v) != -1 THEN v.@ac = s.@ac END
                END;
        // compute @max_dQ
        Start = SELECT s FROM Start:s -(e_type:e)- :t
                WHERE t.@outdegree > 1
            ACCUM
                INT A_s = 0,
                IF s.@A.containsKey(s) THEN A_s = s.@A.get(s) END,
                s.@best_move += move(s.@A.get(t.@cc.get(0)) - A_s + 1/@@m*s.@weight*(s.@ac-t.@ac), -t.@ccWeight, t.@cc.get(0))
            POST-ACCUM
                IF getDeltaQ(s.@best_move) > 0 THEN
                    IF -getWeight(s.@best_move) < s.@ccWeight THEN   // smallest best_move weight < current weight
                        s.@cc.clear(),
                        s.@cc += getCc(s.@best_move),
                        s.@ccWeight = -getWeight(s.@best_move),
                        @@ccChange += 1
                    ELSE
                        IF -getWeight(s.@best_move) == s.@ccWeight AND getvid(s.@cc.get(0)) < getvid(getCc(s.@best_move))  THEN
                            s.@cc.clear(),
                            s.@cc += getCc(s.@best_move),
                            s.@ccWeight = -getWeight(s.@best_move),
                            @@ccChange += 1
                        END
                    END
                END;
        //PRINT @@ccChange AS IterChangeCount;
    END;
    // process node with outdegree = 1
    Start = {v_type};
    Start = SELECT s FROM Start:s -(e_type:e)- :t
        WHERE s.@outdegree == 1 AND t.@outdegree != 1
        ACCUM s.@cc += t.@cc.get(0);
    //PRINT Start.size() AS VertexFollowedToCommunity;
    Start = {v_type};
    Start = SELECT s FROM Start:s -(e_type:e)- :t
        WHERE s.@outdegree == 1 AND t.@outdegree == 1
        ACCUM
            IF getvid(s) <= getvid(t) THEN
                s.@cc += s
            ELSE
                s.@cc += t
            END;
    //PRINT Start.size() AS VertexFollowedToVertex;
    // print result satistic
    Start={v_type};
    Start={v_type};
    Start = SELECT s FROM Start:s
        WHERE s.@cc.size() > 0
        POST-ACCUM
            //@@communityMap += (getvid(s.@cc.get(0)) -> 1);
            @@communityMap += (s.@cc.get(0) -> 1);
    PRINT @@communityMap.size() AS FinalCommunityCount;

//  print @@communityMap;


//     FOREACH (cid, cSize) IN @@communityMap DO
//         @@communitySizeCount += (cSize -> 1);
//     END;


//     PRINT @@communitySizeCount;

  printSet = {models.*, item.*};
  printSet = select s from printSet:s
             post-accum f1.println(s.type,s,s.@cc);

  //print printSet[printSet.@cc];
}
CREATE QUERY closeness(SET<STRING> v_type, SET<STRING> e_type, STRING re_type,INT max_hops=10,
  INT top_k=100, BOOL wf = TRUE, BOOL print_accum = True, STRING result_attr = "",
  STRING file_path = "", BOOL display_edges = FALSE){
  /* Compute Closeness Centrality for each VERTEX.
  Use multi-sourse BFS.
  Link of the paper: http://www.vldb.org/pvldb/vol8/p449-then.pdf
  Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                   result_attr: INT attr to store results to
  max_hops: look only this far from each vertex    file_path: file to write CSV output to
  top_k: report only this many top scores          display_edges: output edges for visualization
  wf: Wasserman and Faust normalization factor for multi-component graphs */
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> VertexScore;
  HeapAccum<VertexScore>(top_k, score DESC) @@topScores;
  SumAccum<INT> @@currDist; #current distance
  BitwiseOrAccum @visitNext; #use bitwise instead of setAccum
  SumAccum<INT> @res; #Result, sum of distance
  SumAccum<INT> @size; #get graph size
  SumAccum<FLOAT> @score;
  BitwiseOrAccum @seen;
  BitwiseOrAccum @visit;
  SumAccum<INT> @@count=1;#used to set unique ID
  SumAccum<INT> @id; #store the unique ID
  SetAccum<INT> @@batchSet; #used to set unique ID
  MapAccum<INT,INT> @@map; #used to set unique ID
  SetAccum<EDGE> @@edgeSet;
  INT empty=0;
  FILE f (file_path);
  INT numVert;
  INT batch_number;
# Compute closeness
  all = {v_type};

  numVert = all.size();
  batch_number = numVert/60;
  IF batch_number==0 THEN batch_number=1; END;

  #Calculate the sum of distance to other vertex for each vertex
  FOREACH i IN RANGE[0, batch_number-1] do
          Start = SELECT s FROM all:s
                  WHERE getvid(s)%batch_number == i
                  POST-ACCUM @@map+=(getvid(s)->0),@@batchSet+=getvid(s);

          FOREACH ver in @@batchSet DO @@map+=(ver->@@count); @@count+=1;END; #set a unique ID for each vertex, ID from 1-63
          Start = SELECT s FROM Start:s POST-ACCUM s.@id=@@map.get(getvid(s));
          Start = Select s FROM Start:s
                  POST-ACCUM s.@seen=1<<s.@id,s.@visit=1<<s.@id; # set initial seen and visit s.@seen1 s.@seen2
          @@batchSet.clear();
          @@map.clear();
          @@count=0;

          WHILE (Start.size() > 0) LIMIT max_hops DO
                @@currDist+=1;
                Start = SELECT t FROM Start:s -(re_type:e)-v_type:t
                        WHERE s.@visit&-t.@seen-1>0 and s!=t #use -t.@seen-1 to get the trverse of t.@seen
                        ACCUM
                              INT c = s.@visit&-t.@seen-1,
                              IF c>0 THEN
                                  t.@visitNext+=c,
                                  t.@seen+=c
                              END
                        POST-ACCUM
                              t.@visit=t.@visitNext,
                              INT r = t.@visitNext,
                              WHILE r>0 DO
                                    r=r&(r-1),t.@res+=@@currDist,t.@size+=1 #count how many 1 in the number, same as setAccum,size()
                              END,
                              t.@visitNext=0;
          END;
          @@currDist=0;
          Start = SELECT s FROM all:s
                  POST-ACCUM s.@seen=0,s.@visit=0;
  END;

  Start = SELECT s FROM all:s
            # Calculate Closeness Centrality for each vertex
          WHERE s.@res>0
          POST-ACCUM
                    IF wf THEN s.@score = (s.@size*1.0/(numVert-1))*(s.@size*1.0/s.@res) ELSE s.@score = s.@size*1.0/s.@res*1.0 END,
            IF result_attr != "" THEN s.setAttr(result_attr, s.@score) END,
                IF print_accum THEN @@topScores += VertexScore(s, s.@score) END,
            IF file_path != "" THEN f.println(s, s.@score) END;
      #test

#Output
    IF file_path != "" THEN
            f.println("Vertex_ID", "Closeness");
    END;

    IF print_accum THEN
        PRINT @@topScores AS top_scores;
        IF display_edges THEN
            PRINT Start[Start.@score];
            Start = SELECT s
            FROM Start:s -(e_type:e)->:t
                ACCUM @@edgeSet += e;
            PRINT @@edgeSet;
        END;
    END;
}
CREATE QUERY wcc (SET<STRING> v_type, SET<STRING> e_type, INT output_limit = 100,
 BOOL print_accum = TRUE, STRING result_attr = "", STRING file_path = "") {
/*
 This query identifies the Connected Components (undirected edges). When finished, each
 vertex is assigned an INT label = its component ID number.
  v_type: vertex types to traverse          print_accum: print JSON output
  e_type: edge types to traverse            result_attr: INT attr to store results to
  file_path: file to write CSV output to    display_edges: output edges for visualization
  output_limit: max #vertices to output (-1 = all)
*/

    MinAccum<INT> @cc_id = 0;       //each vertex's tentative component id
    MapAccum<INT, INT> @@compSizes;
    MapAccum<INT, ListAccum<INT>> @@compGroupBySize;
    FILE f(file_path);

    Start = {v_type};

    # Initialize: Label each vertex with its own internal ID
    S = SELECT x
        FROM Start:x
        POST-ACCUM x.@cc_id = getvid(x)
    ;

    # Propagate smaller internal IDs until no more ID changes can be Done
    WHILE (S.size()>0) DO
            S = SELECT t
                FROM S:s -(e_type:e)- v_type:t
                ACCUM t.@cc_id += s.@cc_id // If s has smaller id than t, copy the id to t
                HAVING t.@cc_id != t.@cc_id'
            ;
    END;

    IF file_path != "" THEN
      f.println("Vertex_ID","Component_ID");
    END;

    Start = {v_type};
    Start = SELECT s FROM Start:s
            POST-ACCUM
                IF result_attr != "" THEN s.setAttr(result_attr, s.@cc_id) END,
                IF print_accum THEN @@compSizes += (s.@cc_id -> 1) END,
                IF file_path != "" THEN f.println(s, s.@cc_id) END;

    IF print_accum THEN
        IF output_limit >= 0 THEN
            Start = SELECT s FROM Start:s LIMIT output_limit;
        END;
        FOREACH (compId,size) IN @@compSizes DO
            @@compGroupBySize += (size -> compId);
        END;
    PRINT @@compGroupBySize;
      PRINT @@compSizes as sizes;
      PRINT Start[Start.@cc_id];
    END;
}
CREATE QUERY betweenness(SET<STRING> v_type, SET<STRING> e_type, STRING re_type,INT max_hops=10,
  INT top_k=100, BOOL print_accum = True, STRING result_attr = "",
  STRING file_path = "", BOOL display_edges = FALSE){
  /* Compute Closeness Centrality for each VERTEX.
  Use multi-sourse BFS.
  Link of the paper: http://www.vldb.org/pvldb/vol8/p449-then.pdf
  Parameters:
  v_type: vertex types to traverse                 print_accum: print JSON output
  e_type: edge types to traverse                   result_attr: INT attr to store results to
  max_hops: look only this far from each vertex    file_path: file to write CSV output to
  top_k: report only this many top scores          display_edges: output edges for visualization
   */
  TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> VertexScore;
  HeapAccum<VertexScore>(top_k, score DESC) @@topScores;
  SumAccum<INT> @@currDist; #current distance
  BitwiseOrAccum @visitNext; #use bitwise instead of setAccum
  BitwiseOrAccum @seen;
  BitwiseOrAccum @visit;
  SumAccum<INT> @@count=1;#used to set unique ID
  SumAccum<INT> @id; #store the unique ID
  SetAccum<INT> @@batchSet; #used to set unique ID
  MapAccum<INT,INT> @@map; #used to set unique ID
  SetAccum<EDGE> @@edgeSet;
  SumAccum<FLOAT> @delta=0;
  MapAccum<INT,BitwiseOrAccum> @times;
  MapAccum<INT,SumAccum<INT>> @sigma;
  ListAccum<INT> @test;
  INT empty=0;
  FILE f (file_path);
  INT numVert;
  INT batch_number;

# Compute betweenness
  all = {v_type};
  numVert = all.size();
  batch_number = numVert/60;
  IF batch_number==0 THEN batch_number=1; END;

  #Calculate the sum of distance to other vertex for each vertex
  FOREACH i IN RANGE[0, batch_number-1] do
          Current = SELECT s FROM all:s
                    WHERE getvid(s)%batch_number == i
                    POST-ACCUM @@map+=(getvid(s)->0),@@batchSet+=getvid(s);

          FOREACH ver in @@batchSet DO @@map+=(ver->@@count); @@count+=1;END; #set a unique ID for each vertex, ID from 1-63
          Start = SELECT s FROM Current:s POST-ACCUM s.@id=@@map.get(getvid(s));
          Start = Select s FROM Current:s
                  POST-ACCUM s.@seen=1<<s.@id,
                             s.@visit=s.@seen,
                             s.@sigma+=(0->1),
                             s.@times+=(0->1<<s.@visit); # set initial seen and visit
          @@batchSet.clear();
          @@map.clear();
          @@count=0;

          WHILE (Start.size() > 0) LIMIT max_hops DO

                  @@currDist+=1;
                  Start = SELECT t FROM Start:s -(re_type:e)-v_type:t
                          WHERE s.@visit&-t.@seen-1>0 and s!=t #use -t.@seen-1 to get the trverse of t.@seen
                          ACCUM                               #updatevisitNext
                                INT c = s.@visit&-t.@seen-1,
                                IF c>0 THEN
                                    t.@visitNext+=c,
                                    t.@seen+=c
                                END,
                                t.@sigma+=(@@currDist->s.@sigma.get(@@currDist-1)) #set sigma based on depth
                          POST-ACCUM
                                t.@visit=t.@visitNext,
                                t.@times+=(@@currDist->t.@visit),
                                t.@visitNext=0;
          END;
          @@currDist+=-1;

          Start = Select s from all:s WHERE s.@sigma.get(@@currDist)!=0;
          WHILE (Start.size()>0) LIMIT max_hops DO
                    @@currDist+=-1;
                    Start = SELECT t FROM Start:s -(re_type:e)-> v_type:t
                WHERE t.@times.get(@@currDist)&s.@times.get(@@currDist+1)!=0
                        ACCUM
                                 FLOAT currValue=t.@sigma.get(@@currDist)/(s.@sigma.get(@@currDist+1)*(1+s.@delta)),
                                 INT r=t.@times.get(@@currDist)&s.@times.get(@@currDist+1),
                                 INT plus=0,
                                 WHILE r>0 DO
                                        r=r&(r-1),plus=plus+1 #count how many 1 in the number, same as setAccum,size()
                                 END,
                                 FLOAT value = currValue*plus/2.0,
                                 t.@delta+=value;

            Start = Select s from all:s WHERE s.@sigma.get(@@currDist)!=0;
        END;
        @@currDist=0;
        Start = SELECT s FROM all:s
                POST-ACCUM s.@seen=0,s.@visit=0,s.@sigma.clear(),s.@times.clear();
  END;

  #PRINT all [all.@delta];
  Start = SELECT s FROM all:s
            POST-ACCUM
                    IF result_attr != "" THEN s.setAttr(result_attr, s.@delta) END,
                    IF print_accum THEN @@topScores += VertexScore(s, s.@delta) END,
                    IF file_path != "" THEN f.println(s, s.@delta) END;
  #Output
    IF file_path != "" THEN
            f.println("Vertex_ID", "Betweenness");
    END;

    IF print_accum THEN
        PRINT @@topScores AS top_scores;
        IF display_edges THEN
            PRINT Start[Start.@delta];
            Start = SELECT s
            FROM Start:s -(e_type:e)->:t
                ACCUM @@edgeSet += e;
            PRINT @@edgeSet;
        END;
    END;

}
CREATE QUERY pagerank (STRING v_type, STRING e_type,
 FLOAT max_change=0.001, INT max_iter=25, FLOAT damping=0.85, INT top_k = 100,
 BOOL print_accum = TRUE, STRING result_attr =  "", STRING file_path = "",
 BOOL display_edges = FALSE) {
/*
 Compute the pageRank score for each vertex in the GRAPH
 In each iteration, compute a score for each vertex:
     score = (1-damping) + damping*sum(received scores FROM its neighbors).
 The pageRank algorithm stops when either of the following is true:
 a) it reaches max_iter iterations;
 b) the max score change for any vertex compared to the last iteration <= max_change.
 v_type: vertex types to traverse          print_accum: print JSON output
 e_type: edge types to traverse            result_attr: INT attr to store results to
 max_iter; max #iterations                 file_path: file to write CSV output to
 top_k: #top scores to output              display_edges: output edges for visualization
 max_change: max allowed change between iterations to achieve convergence
 damping: importance of traversal vs. random teleport

 This query supports only taking in a single edge for the time being (8/13/2020).
*/
    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@topScores;
    MaxAccum<FLOAT> @@max_diff = 9999;    # max score change in an iteration
    SumAccum<FLOAT> @recvd_score = 0; # sum of scores each vertex receives FROM neighbors
    SumAccum<FLOAT> @score = 1;           # initial score for every vertex is 1.
    SetAccum<EDGE> @@edgeSet;             # list of all edges, if display is needed
    FILE f (file_path);

# PageRank iterations
    Start = {v_type};                     # Start with all vertices of specified type(s)
    WHILE @@max_diff > max_change LIMIT max_iter DO
            @@max_diff = 0;
            V = SELECT s
                FROM Start:s -(e_type:e)-> v_type:t
                ACCUM t.@recvd_score += s.@score/(s.outdegree(e_type))
                POST-ACCUM s.@score = (1.0-damping) + damping * s.@recvd_score,
                           s.@recvd_score = 0,
                           @@max_diff += abs(s.@score - s.@score');
    END; # END WHILE loop

# Output
    IF file_path != "" THEN
      f.println("Vertex_ID", "PageRank");
    END;

    V = SELECT s FROM Start:s
        POST-ACCUM
            IF result_attr != "" THEN s.setAttr(result_attr, s.@score) END,
            IF file_path != "" THEN f.println(s, s.@score) END,
            IF print_accum THEN @@topScores += Vertex_Score(s, s.@score) END;

    IF print_accum THEN
        PRINT @@topScores;
        IF display_edges THEN
            PRINT Start[Start.@score];
            Start = SELECT s
                    FROM Start:s -(e_type:e)-> v_type:t
                    ACCUM @@edgeSet += e;
           PRINT @@edgeSet;
        END;
    END;
}
CREATE QUERY NetBuild(vertex<BuildSchedule> input) FOR GRAPH SupplyChain {
  // build schedule -> models -> bom -> item
  // bom, get the required amts per part
  // R21MAE57BX102021-07-27T00:00:00Z

  //Typedef Tuple <string item, int itemQty> modelTuple;

  //MapAccum<String, ListAccum<modelTuple>> @@modelItems;
  GroupByAccum<String modelNumber, String itemNumber, String site, SumAccum<int> qtyper1, SumAccum<int> qty> @gb;
  GroupByAccum<String modelNumber, String itemNumber, String site,SumAccum<int> qtyper, SumAccum<int> qtyonhand, SumAccum<int> qtyLeftOver, SumAccum<int> howManyCanWeBuild> @@res;
  //MapAccum<String, int> @onHand;
  SumAccum<int> @onHand;
  SumAccum<String> @site;
  SumAccum<int> @howManyCanWeBuild;
  int orderqty = 0;

  Start = {input};

  getmodels = select t from Start:s-(scheduled_to_build:e)-models:t
              post-accum orderqty = s.order_qty;

  boms = select t from getmodels:s-(model_bom:e)-BillofMaterial:t;

  items = select t from boms:s-(item_in_bom:e)-item:t
          accum t.@site += s.site_id,
                t.@gb += (s.model_number, s.item_number, s.site_id -> s.quantity_per, (s.quantity_per * orderqty));

  getcounts = select s from items:s-(in_warehouse_inventory:e)-warehouse:t
              where t.WarehouseId == s.@site
              accum if e.qtyonhand < 0 then
                      //s.@onHand += (t.WarehouseId -> 0)
                      s.@onHand = 0
                    else
                      s.@onHand += e.qtyonhand
                      //s.@onHand += (t.WarehouseId -> e.qtyonhand)
                    end
              post-accum foreach entry in s.@gb do
                           if entry.qtyper1 == 0 then
                             @@res += (entry.modelNumber, entry.itemNumber,
                                       entry.site -> entry.qtyper1, s.@onHand, (s.@onHand - entry.qty),0)
                           else
                             @@res += (entry.modelNumber, entry.itemNumber,
                                       entry.site -> entry.qtyper1, s.@onHand, (s.@onHand - entry.qty), (s.@onHand / entry.qtyper1))
                           end
                         end;


  print orderqty;
  //print getcounts[getcounts.@onHand];
  print @@res;
}
