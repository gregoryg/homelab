#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t broken-links:nil
#+options: c:nil creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:t stat:t tags:t tasks:t tex:t timestamp:t title:t toc:nil
#+options: todo:t |:t
#+title: SPARQL Playground in Emacs OR Worst Notebook Ever
#+date: <2022-06-10 Fri>
#+author: Gregory Grubbs
#+email: gregory.grubbs@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1.50 (Org mode 9.5.3)
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
#+startup: overview
* Setup for interactive querying and data manipulation
  + Ref: Endpoints for REST API [[https://stardog-union.github.io/http-docs/][API Reference | ReDoc]]
  + Ref: [[https://docs.stardog.com/operating-stardog/database-administration/adding-data#add-data-using-the-graph-store-http-protocol][Adding Data Using the Graph Store HTTP Protocol| Stardog Doc]]

  The =ob-sparql= used in the following code blocks works *only* for queries using the
  =/query= endpoint.  Some data manipulation can be done on the =/update= endpoint


** Variables for host, database, default endpoint
   #+name: svals
   | connection-name | base-url                                             | db                | api-endpoint | tramp-path                       | cmd-path         | working-path |
   |-----------------+------------------------------------------------------+-------------------+--------------+----------------------------------+------------------+--------------|
   | homelab         | http://172.16.17.17:5820                             | looney-tunes      | query        | /kube:stardog@stardog-stardog-0: | /opt/stardog/bin | mydata       |
   | localhost       | http://localhost:5820                                | looney-tunes      | query        | /kube:stardog@stardog-stardog-0: | /opt/stardog/bin | mydata       |
   | doghouse        | https://doghouse.stardog.cloud:5820                  | insurance         | query        |                                  |                  |              |
   | homelab-secure  | https://preferred-goat-q7vpfs.g57fzg0l.traefikhub.io | looney-tunes      | query        | /kube:stardog@stardog-stardog-0: | /opt/stardog/bin | mydata       |
   | presles         | https://presales.stardog.cloud:5820                  | insurance         | query        |                                  |                  |              |
   | dogpack (rafa)  | http://testlabcluster.eastus.cloudapp.azure.com:5820 | discover-pagerank | query        |                                  |                  |              |
   #+begin_src emacs-lisp :var url=svals[2,1] :var db=svals[2,2] endpoint=svals[2,3]
     db
   #+end_src
   #+begin_src emacs-lisp
     (defcustom gjg/stardog-connections-alist
       nil
       "List of stardog connections "
       :type '(alist :key-type (symbol :tag "Connection name")
                     :value-type (list (string :tag "Endpoint URL")
                                       (string :tag "Database name")
                                       ))
       :group 'gjg
       :version "0.1"
       )

     (defun gjg/annotate-sparql-selection (s)
       "Provide annotations for completing-read using the data in a SPARQL Stardog server table"
       ;; (message (format "DEBUG: stardog list |%s|, table |%s}" s minibuffer-completion-table))
       (let ((item (assoc (intern s) minibuffer-completion-table)))
         (when item (concat
                     (string-pad "" (- 20 (string-width (symbol-name (nth 0 item)))))
                     (nth 1 item)
                     " " (nth 2 item) " " (nth 3 item)
                     )
               )
         ))

     (defun gjg/set-sparql-headers ()
       "Set Org Babel headers for SPARQL.   table named `svar` should have these columns: connection-name, base-url, database, api-type"
       (interactive)
       (let* ((marginalia-align-offset 80)
              (completion-extra-properties '(:annotation-function gjg/annotate-sparql-selection))
              (myconnection (assoc (intern (completing-read "SPARQL Server name: " gjg/stardog-connections-alist)) gjg/stardog-connections-alist))
              (connection-name (nth 0 myconnection))
              (url (nth 1 myconnection))
              (db (nth 2 myconnection))
              (api-type "query")
              )
         ;; (message (format "I will surely set sparql header args to %s %s %s %s" connection-name url db api-type))
         (gjg/set-sparql-header-args url db api-type)
         ))
   #+end_src
  + ref: [[https://stardog-union.github.io/http-docs/#tag/SPARQL][Stardog HTTP SPARQL API Reference | ReDoc]]
** Use CURL with no Org Mode package dependencies
   #+begin_src bash :results table replace :var url=svals[3,1] :var db=svals[3,2]
     #          -H 'Accept: application/sparql-results+json' \
     #     'http://172.16.17.17:5820/looney-tunes/query?reasoning=false' \
     curl -s -X POST \
          -H 'Accept: text/csv' \
          -u admin:admin \
          "${url}/${db}/query?reasoning=false" \
          --data-urlencode 'query=select * WHERE { ?s a :Person ; :name ?n}'
     # echo "url: ${url}, db: ${db}"
   #+end_src


** Function to call in a new section to change endpoint URL
   If changing database, API endpoint etc pass new values to the function

   Cf. =gjg/set-sparql-header-args= and =gjg/set-stardog-bash-header-args= in [[file:~/emacs-gregoryg/emacs/gjg-functions.el][gjg-functions.el]]

** Set SPARQL header args and test with a query
   #+begin_src emacs-lisp :var url=svals[3,1] :var db=svals[3,2] :var endpoint=svals[3,3] :var tpath=svals[3,4] :results silent
     (gjg/set-sparql-header-args url db endpoint)
     (gjg/set-stardog-bash-header-args tpath)
   #+end_src
  #+begin_src sparql
    SELECT * WHERE { ?s ?p ?o ; a ?type } LIMIT 5
  #+end_src


  #+begin_src sparql
    select * where {?s a :Person ; :name ?n } LIMIT 5
  #+end_src

* Insurance database with hands-on labs
** Set up headers for =insurance= database on =doghouse
   #+begin_src emacs-lisp :var url=svals[4,1] :var db="insurance" :var endpoint=svals[2,3] :var tpath=svals[2,4] :results silent
     (gjg/set-sparql-header-args url db endpoint)
;     (gjg/set-stardog-bash-header-args tpath)
   #+end_src

** Stored queries on the =insurance= database
*** Sensitive data in simple query =all_hands_sensitive_property=
   SSN shows unmasked
   #+begin_src sparql
     PREFIX sqs: <tag:stardog:api:sqs:>
     PREFIX : <http://api.stardog.com/>

     select * WHERE{
         <http://api.stardog.com/Customer#4502> a :Customer;
                                                :Name ?NAME;
                                                :SSN ?SSN.
     }
   #+end_src

   Add properties to database:
   | property                      | value                                   |
   |-------------------------------+-----------------------------------------|
   | security.masking.function     | replace(str(?object), ".+", "<Hidden>") |
   | security.properties.sensitive | http://api.stardog.com/SSN              |

   Run the above query again to see masking in effect
*** =home_info= stored query
   #+begin_src sparql
     PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
     PREFIX wgs: <http://www.w3.org/2003/01/geo/wgs84_pos#>
     PREFIX geo: <http://www.opengis.net/ont/geosparql#>
     PREFIX : <http://api.stardog.com/>
     prefix geof: <http://www.opengis.net/def/function/geosparql/>
     prefix unit: <http://qudt.org/vocab/unit#>

     select * {
     {
     ?address a :Address;
                         :Assessed_For ?assessment.
     ?assessment a :Assessment;
                 :Assessment_Value ?value.
     FILTER(?address=<http://api.stardog.com/Address#99>)
     BIND("AssessedValue" as ?category)
     BIND(4 as ?order)

     }
     UNION
     {
     ?address a :Address;
                         :Assessed_For ?assessment.
     ?assessment a :Assessment;
                 :Annual_Tax ?value.
     FILTER(?address=<http://api.stardog.com/Address#99>)
     BIND("Annual Tax" as ?category)
     BIND(5 as ?order)

     }
     UNION
     {
     ?address a :Address;
                         :Assessed_For ?assessment.
     ?assessment a :Assessment;
                 :Land_Area ?value.
     FILTER(?address=<http://api.stardog.com/Address#99>)
     BIND("Land Area" as ?category)
     BIND(3 as ?order)


     }
     UNION
     {
     ?address a :Address;
                         :Assessed_For ?assessment.
     ?assessment a :Assessment;
                 :Premise_Address ?value.
     FILTER(?address=<http://api.stardog.com/Address#99>)
     BIND("Address" as ?category)
     BIND(1 as ?order)


     }
     UNION
     {
     ?address a :Address;
                         :Assessed_For ?assessment.
     ?assessment a :Assessment;
                 :Property_Type ?value.
     FILTER(?address=<http://api.stardog.com/Address#99>)
     BIND("Property Type" as ?category)
     BIND(2 as ?order)

     }

     }
     ORDER BY ASC(?order)
   #+end_src

*** Crime stats
    #+begin_src sparql
      PREFIX sqs: <tag:stardog:api:sqs:>
      PREFIX : <http://api.stardog.com/>

      select * {
        ?statIRI a :Crime_Stats;
                 :Crime_Type ?offense;
                 :Crime_Count ?crimeCount;
                 :Crime_Zip ?zipCode;
                 :Occurred_In ?zipCodeIri .
        ?zipCodeIri a :Zip_Codes .
      }
      LIMIT 10
    #+end_src

    #+begin_src python :session :results file
      import matplotlib
      import matplotlib.pyplot as plt
      fig=plt.figure(figsize=(3,3))
      plt.plot([1,3,2])
      fig.tight_layout()

      fname = '/tmp/myfig.png'
      plt.savefig(fname)
      fname # return this to org-mode
    #+end_src

** Hands on exercises
   Use any combo of SPARQL and Stardog Explorer to answer these
*** Marvel BONUS Challenge
    What Superpower does =Mystique= have?

    Use the Movies database
**** Reset header args to point to =movies= DB
     #+begin_src emacs-lisp :var url=svals[4,1] :var db="movies" :var endpoint=svals[4,3] :var tpath=svals[4,4] :results silent
     (gjg/set-sparql-header-args url db endpoint)
     #+end_src
**** Use SPARQL
     #+begin_src sparql
       select *
       where { ?s ?p ?o }
       LIMIT 9
     #+end_src

     #+begin_src sparql
       SELECT *
       where { ?s a :character }
     #+end_src

     NOTE: use 'query all graphs'
     #+begin_src sparql
       SELECT *
       WHERE {
        ?s a ?class ;
        rdfs:label ?label .
         ?class rdfs:label ?classType .
         filter ( contains(lcase(?label), 'character'))
       }
     #+end_src

     #+begin_src sparql
       select *
       where { ?s a tag:stardog:project:220202010345:modelConceptClass:220202e4TIRVY }
       limit 10
     #+end_src

     #+begin_src sparql
       SELECT *
       {
           ?instance a ?classType;
                     rdfs:label ?instanceLabel.
           ?classType a owl:Class;
                      rdfs:label ?classLabel.
           }
       LIMIT 5
     #+end_src
* Northwind Everclear - using pystardog
  :PROPERTIES:
  :header-args:python: :session jupyter-venv :results output
  :END:
  Refer to poc-northwind-everclear
  Notebook =Parallel_Data_Load.ipynb= in =Data-Load= directory
** Set up headers for =paratest= database on =homelab=
   #+begin_src emacs-lisp :var url=svals[2,1] :var db="paratest" :var endpoint=svals[2,3] :var tpath="~/tmp/" :results silent
     (gjg/set-sparql-header-args url db endpoint)
     (gjg/set-stardog-bash-header-args tpath)
   #+end_src
** Reproduce the data loading Jupyter notebook without Jupyter
*** Import statements
    Establish a Python session and pull in imports

    Set the Python header args according to the =#properties= definition above

    #+begin_src emacs-lisp :session jupyter-venv
      (use-package pyvenv
        :straight t)
      (pyvenv-activate "~/.local/python-venvs/jupyter")
    #+end_src

    #+begin_src bash :session jupyter-venv :results output
      echo "${VIRTUAL_ENV}"
    #+end_src


    #+begin_src python
      import sys
      print('\n'.join(sys.path))
    #+end_src

    #+begin_src python
      # IMPORT STATEMENTS

      import stardog
      import asyncio
      import os
      import re
      import urllib.parse
      from requests.auth import HTTPBasicAuth
      import time
      from requests import get, post
      from requests_toolbelt.multipart.encoder import MultipartEncoder
    #+end_src

*** Notebook environment variables
    #+begin_src python
      # NOTEBOOK ENVIRONMENT VARIABLES - CHANGE TO YOUR ENVIRONMENT

      # env_endpoint = 'http://stardog1:5820'
      env_endpoint = 'http://172.16.17.17:5820'
      env_username = 'admin'
      env_password = 'admin'
      env_database = "paratest"
      env_dir_path = '/home/gregj/projects/graph/stardog/poc-northwind-everclear/Data-Load/domains/people/data'
      env_mapping_path = "/home/gregj/projects/graph/stardog/poc-northwind-everclear/Data-Load/domains/people/mappings/people.sms2"
      env_file_type = "JSON"

      env_content_list = [stardog.content.File('/home/gregj/projects/graph/stardog/poc-northwind-everclear/Data-Load/domains/people/sample.ttl')] # Data files to add

      c_config = {
          "conn_details": {
              'endpoint': env_endpoint,
              'username': env_username,
              'password': env_password
          },
          "database": env_database,
          "dir_path": env_dir_path,
          "mapping_path": env_mapping_path,
          "file_type": env_file_type
      }
    #+end_src

*** Function definitions
    #+begin_src python
      # FUNCTION DEFINITIONS

      # Returns a PyStardog connection with 'verify' set
      def get_conn(config):
          CERT_PATH=os.getenv("CERT_PATH", "") # might be useful for verify=false setting
          with stardog.Connection(config["database"], **config["conn_details"]) as conn:
              if len(CERT_PATH) > 0:
                  conn.client.session.verify = CERT_PATH
              else:
                  conn.client.session.verify = False
          print("  - Certificate Check: verify = " + str(conn.client.session.verify)) # Just for debug and check purposes
          return conn

      # Returns a PyStardog administration with 'verify' set
      def get_admin(config):
          CERT_PATH=os.getenv("CERT_PATH", "") # might be useful for verify=false setting
          with stardog.Admin(**config["conn_details"]) as admin:
              if len(CERT_PATH) > 0:
                  admin.client.session.verify = CERT_PATH
              else:
                  conn.client.session.verify = False
          print("  - Certificate Check: verify = " + str(admin.client.session.verify)) # Just for debug and check purposes
          return admin


      def get_auth(config):
          return HTTPBasicAuth(config["conn_details"]["username"], config["conn_details"]["password"])


      # Returns the healthcheck URL for the given Stardog Endpoint
      def get_healthcheck_url(config):
          return config["conn_details"]["endpoint"] + "/admin/healthcheck"


      # Returns the Status Code of the healthcheck request. Returns None if the the server is unavailable
      def get_healthcheck(config):
          try:
              # remove cert check - verify = False
              healthcheck_result = get(get_healthcheck_url(config), verify = False, auth = get_auth(config))
              return healthcheck_result.status_code
          except:
              return None


      # Gets triple cound of DB with exact parameter set to true
      def get_triple_count(config):

          conn = get_conn(config)
          size = conn.size(exact=True)  # This can take some time to check since we are asking for exact, this does not effect the actual load time
          return size


      # This is just using the HTTP API directly
      def get_triple_count_api(config):

          ## The Stardog HTTP endpoint for importing data from a file
          size_url = config["conn_details"]['endpoint'] + '/' + config["database"] + '/size?exact=True'

          stardogResult = get(size_url, auth = get_auth(config), verify = False)

          return int(stardogResult.text)


      # Get the row count of results
      def get_row_count(config, query):
          conn = get_conn(config)
          row_count = select_query(config, query)["results"]["bindings"][0]["count"]["value"]

          return int(row_count)


      # Send a select query
      def select_query(config, query):
          conn = get_conn(config)
          result = conn.select(query)

          return result


      # Get the row count directly from API
      def get_row_count_api(config, query):

          ## The Stardog HTTP endpoint for importing data from a file
          sparql_url = config["conn_details"]['endpoint'] + '/' + config["database"] + '/query?query=' + urllib.parse.quote_plus(query) # Need to URL encode the query

          stardogResult = post(sparql_url, auth = get_auth(config), verify = False, headers={'Accept': 'application/sparql-results+json'})

          row_count = stardogResult.json()["results"]["bindings"][0]["count"]["value"]

          return int(row_count)


      def load_file(conn_config, action_config):

          multipart_data = MultipartEncoder(
              fields = {
                  'database': conn_config["database"],
                  'mappings': open(action_config["mapping_path"],'br'),
                  'options' : '',
                  'input_file_type': action_config["file_type"],
                  'input_file': open(action_config["file_path"],'br')
              })

          ## The Stardog HTTP endpoint for importing data from a file
          import_url = conn_config["conn_details"]['endpoint'] + '/admin/virtual_graphs/import'

          # remove cert check - verify = False
          stardogResult = post(import_url, auth = get_auth(conn_config), data = multipart_data, verify = False, headers={'Content-Type': multipart_data.content_type})

          return stardogResult.status_code


      async def async_load_file(conn_config, action_config):
          return load_file(conn_config, action_config)


      async def load_file_async(conn_config, action_config):
          # network_latency = 0.25
          # # print("Network Latency is:" + network_latency)
          # await asyncio.sleep(network_latency) # Network Latency
          return await async_load_file(conn_config, action_config)


      async def para_load(config):
          dir_path = config["dir_path"]
          mapping_path = config["mapping_path"]
          file_type = config["file_type"]
          input_files = os.listdir(dir_path)

          a_config_list = []
          pre_row_count = 0

          ## Get the row counts, need before and after
          pre_count = get_triple_count(config)
          #pre_count = get_triple_count_api(config) # API directly
          with open(mapping_path,'br') as f:

              count_query = ""
              data = f.read().rstrip()
              prefix = re.findall(r"(^prefix.*|^PREFIX.*)", data.decode('utf-8')) # Get all the prefix lines

              for p in prefix:
                  count_query += p + "\n" # Add prefix to query

              count_query += "\nSELECT (COUNT(*) AS ?count) { \n" + re.search(r"\}[\S\s]*TO[\S\s]*\{([\S\s]*(.*))\}[\S\s]*WHERE", data.decode('utf-8')).group(1) + "\n }" # Match 'TO {...}'

              pre_row_count = get_row_count(config, count_query)

          ## Creates all the Action Configurations and appends them to the action Configuration List
          for f in input_files:
              a_config = {
                  "mapping_path": mapping_path,
                  "file_type": file_type,
                  "file_path": dir_path + "/" + f
              }

              a_config_list.append(a_config)

          ## Creates a co-routine list
          cors = [load_file_async(config, a) for a in a_config_list]
          results = asyncio.gather(*cors)

          start_time = time.perf_counter() # Start timmer

          ## Await for all tasks to complete
          results_list = await results

          ## Show HTTP status codes for each file load if they are not successful
          for c, r in zip(a_config_list, results_list):
              if r != 200:
                  print("FAILED LOAD: " + os.path.basename(c["file_path"]) + " - file load HTTP status " + str(r))

          ##  Output load results
          elapsed_time = time.perf_counter() - start_time # End timmer
          print(f"Load executed in {elapsed_time:0.2f} seconds.")

          new_count = get_triple_count(config)
          #new_count = get_triple_count_api(config) # API directly
          load_count = new_count - pre_count
          print("Triples Loaded: " + str(load_count))

          new_row_count = get_row_count(config, count_query)
          #new_row_count = get_row_count_api(config, count_query)
          load_row_count = new_row_count - pre_row_count
          print("Rows Loaded: " + str(load_row_count))

      # Load RDF files (ontoloty/data)
      def load_data(config, content_list):
          conn = get_conn(config)
          conn.begin()
          for content in content_list:
              conn.add(content)
              print("Loaded : " + content.fname)
          result = conn.commit() # PLAT-4257, commit should return added/deleted like HTTP API
          conn.close()

          return result
    #+end_src

*** Run data loading
    #+begin_src python
      # RUN LOAD

      healthcheck_url = get_healthcheck_url(c_config)

      if(get_healthcheck(c_config) == 200):
          load_data(c_config, env_content_list) # This could be the ontology
          await para_load(c_config)
      else:
          print("Error: The Stardog Server at " + healthcheck_url + " is not available")
          print("Error: A Stardog Server must be running and available, check your connection configuration and try again.")
          print("Error: To check the the status of the Stardog server you may use the following CLI command")
          print("Error: stardog-admin --server http://localhost:5820 server status")
    #+end_src

*** Test a query
    #+begin_src python
      # TEST QUERY
      query = 'SELECT * { ?s ?p ?o } LIMIT 10'

      response = select_query(c_config, query)

      print(response["results"])
    #+end_src

*** Test the query the Org mode way
    #+begin_src sparql
      select * {?s ?p ?o} LIMIT 10
    #+end_src

* Phat insurance
**
* Healthcare
  :PROPERTIES:
  :header-args:python: :session jupyter-venv :results output
  :END:

** Set up headers for =healthcare= database on =homelab-secure=
  #+begin_src emacs-lisp :var url=svals[5,1] :var db="musicbrainz" :var endpoint=svals[5,3] :var tpath="~/tmp/" :results silent
    (gjg/set-sparql-header-args url db endpoint)
    (gjg/set-stardog-bash-header-args tpath)
  #+end_src
  #+begin_src sparql
    SELECT ?year (count(?album) AS ?count)
    FROM <virtual://all> {
          ?album a :Album ;
                 :date ?date ;
          BIND (year(?date) AS ?year)
    }
    GROUP By ?year
  #+end_src

** Count of all triples
   Test time against doghouse
   #+begin_src sparql
     select (count(*) AS ?triples)
     FROM <:context:virtual>
     WHERE { ?s ?p ?o}
     LIMIT 10
   #+end_src
* Dogpack - and Discover Pagerank queries
** Set up headers for =healthcare= database on =homelab-secure=
  #+begin_src emacs-lisp :var url=svals[7,1] :var db=svals[7,2] :var endpoint=svals[7,3] :var tpath="~/tmp/" :results silent
    (gjg/set-sparql-header-args url db endpoint)
    (gjg/set-stardog-bash-header-args tpath)
  #+end_src
  #+begin_src sparql
  #+end_src
** 2.1 - How much data do we have?
   #+begin_src sparql
     SELECT (count(?subject_node) AS ?number_of_nodes) {
       { SELECT DISTINCT ?subject_node {
         ?subject_node ?relationship ?object_node . }
       }
     }
   #+end_src
** 2.2 - What are all the known types?
   #+begin_src sparql
     SELECT DISTINCT ?Type {
       ?subject_node rdf:type ?Type . }
   #+end_src
** 2.3 - What are all the known relationships?
   #+begin_src sparql
     SELECT DISTINCT ?relationship {
       ?subject_node ?relationship ?object_node . }
   #+end_src
** Step 3 - run the =discover-pagerank= job
** 4.1 - What are the top 100 most connected nodes?
   #+begin_src sparql
     SELECT ?subject_node ?rank {
       graph <example:analytics:graph> {
         ?subject_node ?p ?rank .
       }
     } ORDER BY desc(?rank) LIMIT 100
   #+end_src
** Step 5 - filter out =stardog:router=
   #+begin_src sparql
     SELECT ?node_name ?rank {
       graph <example:analytics:graph> {
         ?node ?p ?rank .

         filter(?node != <http://api.stardog.com/router>)

         BIND(STRAFTER(str(?node), "tag:stardog:api:") as ?node_name)
       }
     } ORDER BY desc(?rank) LIMIT 10
   #+end_src
**
* Learning SPARQL internal course
  + course creator: Rafael Campo
** Set up headers for =healthcare= database on =homelab-secure=
  #+begin_src emacs-lisp :var url=svals[7,1] :var db="gg-training" :var endpoint=svals[7,3] :var tpath="~/tmp/" :results silent
    (gjg/set-sparql-header-args url db endpoint)
    (gjg/set-stardog-bash-header-args tpath)
  #+end_src
** CRUD
   Create - Read - Update - Delete
   Use database =gg-training=
*** Define namespaces on the database
    #+begin_src sparql
      PREFIX t: <http://training.stardog.com/instructor/rafaelcampo/training/>
      PREFIX tm: <http://training.stardog.com/instructor/rafaelcampo/trainingModule/>
      select * { ?s ?p ?o }
    #+end_src
*** Read
**** Select all triples
    #+begin_src sparql
      SELECT ?subject ?predicate ?object WHERE {
        ?subject ?predicate ?object
      }
    #+end_src
**** Use '*' to display all variables
     #+begin_src sparql
       SELECT * {
         ?subject ?predicate ?object .
       }
     #+end_src
**** Select distinct types
     #+begin_src sparql
       SELECT DISTINCT ?type WHERE {
         ?subject a ?type .
       }
     #+end_src
**** Select the number of triples
     This query uses the =COUNT()= function

     Note the mandataor AS phrase to specify a variable name for the result of the COUNT
     function.
     #+begin_src sparql
       SELECT (COUNT(*) AS ?number_of_triples) WHERE {
         ?subject ?predicate ?object .
       }
     #+end_src
**** Select all distinct predicates
     Note the =WHERE= clause is optional in a =SELECT= query

     #+begin_src sparql
       SELECT DISTINCT ?predicate {
         ?subject ?predicate ?object
       }
     #+end_src
**** Are and Producers also known Bands
     #+begin_src sparql
       PREFIX : <http://stardog.com/tutorial/>
       ASK WHERE {
           ?producer a :Producer ;
                     a :Band .
       }
     #+end_src
     #+begin_src sparql
       PREFIX : <http://stardog.com/tutorial/>
       SELECT * {
           ?producer rdf:type :Producer ;
                     a :Band .
       }
     #+end_src

* Emacs interface experiments using =homelab-secure=
** Set up headers for =looney-tunes= database on =homelab-secure=
 #+begin_src emacs-lisp :var url=svals[2,1] :var db="looney-tunes" :var endpoint=svals[2,3] :var tpath="~/tmp/" :results silent
   (gjg/set-sparql-header-args url db endpoint)
   (gjg/set-stardog-bash-header-args tpath)
 #+end_src
** Get all predicates
   #+begin_src sparql
     select distinct ?p where {?s ?p ?o}
   #+end_src
** Emacs table lookup stuff

    #+TBLNAME: rates
   | currency        | abbreviation | euros |
   |-----------------+--------------+-------|
   | euro            | eur          |     1 |
   | Norwegian krone | nok          |  0.15 |
   | Swedish krona   | sek          |  0.12 |
   | US dollar       | usd          |  0.77 |

   |  date | expense          |  sum | currency | rate |   euros |
   |-------+------------------+------+----------+------+---------|
   |  1.3. | flights          |  324 | eur      |    1 |     324 |
   |  4.6. | books and maps   |  243 | usd      | 0.77 |  187.11 |
   | 30.7. | rental car       | 8300 | sek      | 0.12 |    996. |
   |  2.7. | hotel            | 1150 | sek      | 0.12 |    138. |
   |  2.7. | lunch            |  190 | sek      | 0.12 |    22.8 |
   |  3.7. | fishing licenses | 1400 | nok      | 0.15 |    210. |
   |  3.7. | gasoline         |  340 |          |  nil | 340 nil |
   #+TBLFM: $5='(org-lookup-first $4 '(remote(rates,@2$2..@>$2)) '(remote(rates,@2$3..@>$3)))::$6=$5*$3
* PyStardog using Databrics from local notebook
  This makes use of =databricks-connect=

  Let's activate our Python virtual environment
  #+begin_src emacs-lisp :session jupyter-venv
    (pyvenv-activate "~/.local/python-venvs/jupyter")
  #+end_src



* playground

** Use sessions to server
   I don't know whether I can do this with Stardog Cloud (get a shell) - but it works well
   for local, Kubernetes, and standard servers
   + Establish the session
      #+begin_src bash :session stardog-sesh :dir /kube:stardog@stardog-stardog-0:/var/opt/stardog/
     export PATH=$PATH:/opt/stardog/bin
     #+end_src

   + list databases
     #+begin_src bash :session stardog-sesh :results replace raw
       stardog-admin db list
     #+end_src

   + Let's load the good stuff
     #+begin_src bash :session stardog-sesh
       time stardog-admin db create -n Customer360 /tmp/Customer360_tag_stardog_api_context_local.ttl.gz
     #+end_src

   +
* Clojure!
#+PROPERTY: header-args:clojure :dir ~/projects/graph/stardog/stardog-clj
** Define Stardog Server URL and DB name
  #+name: stardog-server-url
  |http://172.16.17.18:5820|
  #+name: stardog-db
  |looney-tunes|
** Hook up =stardog-clj= and start a Cider session
   Wait to evaluate Clojure code until REPL comes up!
   #+begin_src emacs-lisp
     (cider-jack-in-clj '(:project-dir "~/projects/graph/stardog/stardog-clj"))
   #+end_src

** Connect to DB
   #+begin_src clojure :session clj :dir ~/projects/graph/stardog/stardog-clj  :var url=stardog-server-url[,0] :var db=stardog-db[,0]
     (use 'clojure.pprint)
     (use 'stardog.core)

     (def c (connect {:db db :server url}))
   #+end_src

** Query and explore results
   Note use of =(print-table)= and =:results table pp= to create Org Mode table
   #+begin_src clojure :session clj
     (def results (query c "select * where { ?s ?p ?o }" ))
     ;;(def string-results (query c "select ?s ?p ?o where { ?s ?p ?o }" {:converter str}))
   #+end_src

   #+name: query-overview
   #+begin_src clojure :session clj :results table pp
    (print-table (take 5 results))
   #+end_src





   #+begin_src clojure :session clj :results pp
     (take 3 (map :p results))
   #+end_src

   #+begin_src clojure :session clj :results pp
     (def results (query c "
     PREFIX : <http://looneytunes-graph.com/>
     select distinct ?name
     WHERE { ?s ?p ?o . ?s a :Looney_Tunes_Character ; :name ?name }"))
   #+end_src

   #+begin_src clojure :session clj :results table pp
     (print-table results)
   #+end_src



* SQL play for use with virtual graphs
** MySQL
  Let's start with some MySQL
  #+begin_src sql :engine mysql :dbhost 172.16.17.5 :dbpassword <mypassword> :database teslafi :hlines no
    --          select * FROM teslafi.teslafi  ORDER BY RAND() LIMIT 10

            show tables
  #+end_src

** sqlite
    :PROPERTIES:
    :header-args:sqlite:   :db /data/data-files/teslafi/teslafi.db :column yes :header yes
    :END:
    Set header args for sqlite in Org properties above
   #+begin_src sqlite
           select distinct(user_charge_enable_request)  from `teslafi-2017-04`
   #+end_src

   #+begin_src sqlite
         select * FROM `teslafi` WHERE calendar_enabled='True' ORDER BY RANDOM() LIMIT 10
   #+end_src

   #+begin_src sqlite
     --     select distinct(charge_to_max_range) from `teslafi`
     --            select charge_to_max_range from teslafi WHERE  charge_to_max_range='' LIMIT 4
     -- select chargeNumber, max(strftime('%Y-%m-%d',`Date`)) AS chargeDate, battery_level, max(battery_range) FROM teslafi
     select chargeNumber, max(strftime('%Y-%m',`Date`)) AS chargeMonth, battery_level, max(battery_range) FROM teslafi
     WHERE chargeNumber > 0 AND battery_level > 99 AND battery_level <> ''
     -- GROUP BY chargeNumber
     GROUP BY strftime('%Y-%m',`Date`)
     -- ORDER BY chargeNumber ASC
     ORDER BY chargeMonth ASC
     LIMIT 10
   #+end_src
