#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t broken-links:nil
#+options: c:nil creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t
#+options: todo:t |:t
#+title: README-guix
#+date: <2022-02-04 Fri>
#+author: Gregory Grubbs
#+email: gregory.grubbs@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.5.2)
#+cite_export:
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
* refs
  + [[https://willschenk.com/articles/2019/installing_guix_on_nuc/][Installing guix on IntelNUC]]
  + [[https://boilingsteam.com/i-love-arch-but-gnu-guix-is-my-new-distro/][I Love Arch, But GNU Guix Is My New Distro - Boiling Steam]]
  + [[https://felsoci.sk/blog/installing-python-modules-on-guix.html][Installing Python modules on Guix - Marek's blog]]
  + [[https://rednosehacker.com/taking-baby-steps-with-guix-4-the-manifests][Taking baby steps with Guix (4): the manifests â€” Red Nose Hacker]]
  + [[https://jeko.frama.io/en/index.html][Home - Guile Hacker Handbook]]
  +

* Flatpak
  Because some of the unsavory code I want to run may not be enthusiastically
  provided and maintained, I will make use of Flatpak on Guix to run things such as:
  + Steam
  + Zoom
  + Visual Studio Code
  + Microsoft Teams
  + Microsoft Edge
  + Signal Desktop
  + Discord
  + Slack

  To control where things are installed, we can add a bind mount to the key app install paths
  + System-wide path =/var/lib/flatpak=
  + Local path =~/.local/share/flatpak= (and maybe =~/.var/app=)

  I have decided to use the =--user= installs

  Add flathub:
  #+begin_src bash
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    # Optionally for local
    flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  #+end_src

* Guix Management
  Profiles throw a curve ball.  I think I would prefer to make very little use of them -
  so keep to the default profile almost exclusively.

  I haven't figured out yet if profiles can be safely used *additively* - like activate a
  whole Python environment when needed without losing access to the packages that I was
  already using

  OTOH, it appears judicious use of profiles can help make updates bearable by updating
  only the subset of things you care about at the moment rather than triggering recompiles
  and downloads of the entire system.

* Guix complete system to-dos [93%]
** DONE Add cifs bind mounts
** DONE figger it out re: libinput and tap-to-touch+scrolling
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:40]
:END:
   Tap to click
   2-finger tap right click
   other stuff too
** DONE compile albert or replace it with *rofi*
*** DONE Get Alt-space working on EXWM windows
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-30 Sun 10:50]
:END:
      Or *any* key combo - try out
** DONE get notifications working (dunst)
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:42]
:END:
** DONE kubectl (just downloaded and moved to =~/bin=)
** DONE JupyterLab with R and Python kernels, pyTigerGraph etc
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 16:44]
   :END:
   Steps:
   1. Install all requisite R packages (into a profile, preferably)
      #+begin_src bash
        guix package -i r gcc-toolchain gfortran-toolchain r-devtools r-irkernel
      #+end_src
   2. Activate the profile, then use R REPL to install the kernel
      #+begin_src R
        IRkernel::installspec()
      #+end_src
   3. Fire up JupyterLab from that profile
      #+begin_src bash
        run-jupyterlab.sh
      #+end_src
** DONE NOPASSWD sudo
** CANCELLED udev permissions so I can adjust backlight
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2022-01-29 Sat 08:43] \\
  Just started magically working :shrug:
:END:
** DONE Change rofi theme
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:40]
   :END:
** TODO Document and add method for updating =channels.scm=
   How do I get updated hashes for =.config/guix/channels.scm=?  Does it get updated when
   doing =guix reconfigure=??
** DONE Fix python environment for unread Gmail in polybar
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:40]
   :END:
   Fix was to use =pip3=
** DONE CUPS and lpr
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 15:42]
   :END:
   + =lpstat -e= shows all available destinations
   +
** DONE ssh-agent for user session
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 18:02]
   :END:
   + have GDM start it?
** DONE Make special-install binaries repeatable
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2022-02-03 Thu 07:43]
   - State "STARTED"    from "TODO"       [2022-02-03 Thu 07:41]
   :END:
** DONE Set default US Keyboard layout (not altgr-intl)
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:41]
   :END:
   Simply omit the second parameter, i.e. =(keyboard-layout (keyboard-layout "us"))=
* System configuration

  #+begin_src scheme :tangle ~/config.scm
    (use-modules (srfi srfi-1)) ; for 'remove
    (use-modules (gnu ) (nongnu packages linux))
    (use-modules (gnu packages xfce))
    (use-modules (gnu system)) ; for sudoers
    (use-modules (gnu packages emacs-xyz))
    (use-modules (gnu packages version-control))
    (use-modules (gnu packages package-management))
    (use-modules (gnu packages vim))
    (use-modules (gnu packages dunst))
    (use-modules (gnu packages fonts))
    (use-modules (gnu packages code)) ; the silver searcher
    (use-modules (gnu services ))
    (use-modules (gnu services networking))
    (use-modules (gnu services virtualization))
    (use-modules (gnu packages emacs))
    (use-modules (gnu services docker))
    (use-modules (gnu services cups))
    (use-modules (gnu services ssh ))
    (use-modules (gnu packages ssh))
    (use-modules (gnu packages compton))
    (use-modules (gnu packages gnome))
    (use-modules (gnu packages image-viewers))
    (use-modules (gnu packages xorg))
    (use-modules (gnu packages wm))
    (use-modules (gnu packages python))
    (use-modules (gnu packages rsync))
    (use-modules (gnu packages freedesktop))
    (use-modules (gnu packages file))
    (use-modules (gnu packages gnupg))
    (use-modules (gnu packages samba))
    (use-modules (gnu packages music))
    (use-modules (gnu packages gnome-xyz))
    (use-modules (gnu packages cups))
    (use-modules (gnu packages pulseaudio))
    (use-modules (gnu packages kde-frameworks))
    ;; (use-modules (gnu packages python-web))
    (use-modules (gnu packages xdisorg))
                                            ;    (use-service-modules nix)
    (use-service-modules desktop networking ssh xorg)

    ;; wilschenk's odd thing I need to figure out: this-file
    (define this-file
      (local-file (basename (assoc-ref (current-source-location) 'filename))
                  "config.scm"))

    ;; define additional partitions and bind mounts
    (define data-drive
      (file-system
       (device (file-system-label "data"))
       (type "ext4")
       (mount-point "/data")))
    (define (%projects-bind-mount) "/data/projects")
    (define (%backgrounds-bind-mount) "/data/backgrounds")

    ;; fix up my touchpad for laptops
    (define %xorg-libinput-config
      "Section \"InputClass\"
                      Identifier \"libinput touchpad gorto\"
                      Driver \"libinput\"
                      MatchDevicePath \"/dev/input/event*\"
                      MatchIsTouchpad \"on\"

                      Option \"NaturalScrolling\" \"on\"
                      Option \"Tapping\" \"on\"
                      Option \"ClickMethod\" \"clickfinger\"
                      # Option \"TappingDrag\" \"on\"
                      Option \"DisableWhileTyping\" \"on\"
                      Option \"MiddleEmulation\" \"on\"
                      Option \"ScrollMethod\" \"twofinger\"
                    EndSection
                    # Section \"InputClass\"
                    #   Identifier \"Keyboards\"
                    #   Driver \"libinput\"
                    #   MatchDevicePath \"/dev/input/event*\"
                    #   MatchIsKeyboard \"on\"
                    # EndSection
                    ")

    ;;
    (define %my-desktop-services
      (modify-services %desktop-services
                       ;; Configure the substitute server for the Nonguix repo

                       ;; Suspend the machine when the laptop lid is closed
                       (elogind-service-type config =>
                                             (elogind-configuration (inherit config)
                                                                    (handle-lid-switch-external-power 'suspend)))

                       ;; Enable backlight control rules for users
                       ;; (udev-service-type config =>
                       ;;                    (udev-configuration (inherit config)
                       ;;                                        (rules (cons %backlight-udev-rule
                       ;;                                                     (udev-configuration-rules config)))))

                       ;; Add OpenVPN support to NetworkManager
                       (network-manager-service-type config =>
                                                     (network-manager-configuration (inherit config)
                                                                                    (vpn-plugins (list network-manager-openvpn))))))

    ;; the heart of the matter
    (operating-system
     (kernel linux)
     (locale "en_US.utf8")
     (host-name "camina")
     (timezone "America/Denver")
     (initrd-modules (append (list "vmd")
                             %base-initrd-modules))

     (keyboard-layout (keyboard-layout "us"))

     ;; This will be what is used on the target machine
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (timeout 1)
                  (targets (list "/boot/efi"))))

     ;; This is needed to create a bootable USB
     ;;(bootloader (bootloader-configuration
     ;;              (bootloader grub-bootloader)
     ;;              (target "/dev/sda")))

     (firmware (append (list iwlwifi-firmware)
                       %base-firmware))

     (sudoers-file
      (plain-file "sudoers"
                  (string-append (plain-file-content %sudoers-specification)
                                 (format #f "~a ALL = NOPASSWD: ALL~%"
                                         "gregj"
                                         ))))
     (users (cons* (user-account
                    (name "gregj")
                    (group "users")
                    (supplementary-groups '("wheel" "netdev" "audio" "lp" "video" "docker" "kvm" "libvirt"))
                    ;; TODO: Default to name?
                    (home-directory "/home/gregj"))
                   %base-user-accounts))

     ;; think about adding *all* packages here and breaking into profiles/manifests later
     (packages
      (append
       (list
        xfce
        emacs-exwm
        emacs-next
        picom
        upower
        xscreensaver
        git
        flatpak
        vim
        font-hack
        feh
        wmctrl
        xrandr
        autorandr
        arandr
        rofi
        emacs-guix
        polybar
        rsync
        xdg-utils
        file
        dunst
        libnotify
        python
        ;; python-google-api-client
        pinentry
        pinentry-gtk2
        adwaita-icon-theme
        papirus-icon-theme
        hicolor-icon-theme
        oxygen-icons
        elementary-xfce-icon-theme
        tango-icon-theme
        setxkbmap
        the-silver-searcher
        cifs-utils
        playerctl
        cups
        ;; gtk+:bin
        pavucontrol
        ;; xdg-desktop-portal
        ;; xdg-desktop-portal-gtk
        (specification->package "nss-certs"))
       %base-packages))


     (services
      (append
       (list
        ;; Copy current config to /etc/config.scm
        (simple-service 'config-file etc-service-type
                        `(("config.scm" ,this-file)))
        ;; (service slim-service-type
        ;;          (slim-configuration
        ;;           (xorg-configuration
        ;;            (xorg-configuration
        ;;             (keyboard-layout keyboard-layout)
        ;;             (extra-config (list %xorg-libinput-config))))))
        (service gnome-desktop-service-type)
        (service openssh-service-type
                 (openssh-configuration
                  (x11-forwarding? #t)
                  (allow-agent-forwarding? #t)))
        ;; Enable the build service for Nix package manager
        ;;        (service nix-service-type)
        (service docker-service-type)
        (service cups-service-type
                 (cups-configuration
                  (web-interface? #t)
                  (extensions
                   (list cups-filters hplip-minimal))))
        (service libvirt-service-type
                 (libvirt-configuration
                  (unix-sock-group "libvirt")
                  (listen-tcp? #t)))
                  ;; (tls-port "16555")))

        (set-xorg-configuration
         (xorg-configuration
          (keyboard-layout keyboard-layout)
          (extra-config (list %xorg-libinput-config))))
        )
       ;; (modify-services %my-desktop-services (delete gdm-service-type))
       %my-desktop-services
       ;; %desktop-services
       ))
     (swap-devices (list (swap-space (target (file-system-label "swap")))))
     ;; (file-system-label "swap")))
     (file-systems (cons* (file-system
                           (device (file-system-label "guix"))
                           (mount-point "/")
                           (type "ext4"))
                          ;; Not needed for bootable usb but needed for final system
                          (file-system
                           (device (file-system-label "guix-gnu"))
                           (mount-point "/gnu")
                           (type "xfs"))
                          data-drive
                          (file-system
                           (device (%projects-bind-mount))
                           (mount-point "/home/gregj/projects")
                           (type "none")
                           (flags '(bind-mount))
                           (dependencies (list data-drive)))
                          (file-system
                           (device (%backgrounds-bind-mount))
                           (mount-point "/home/gregj/backgrounds")
                           (type "none")
                           (flags '(bind-mount))
                           (dependencies (list data-drive)))
                          (file-system
                           (device "//172.16.17.5/archive")
                           ;; (title 'device)
                           ;; (options "username=gregj,uid=1000,gid=998,credentials=/home/gregj/.config/.smbfile,user")
                           (options "username=gregj,uid=1000,gid=998,domain=domain,user,rw,noauto")
                           (mount-point "/data/archive")
                           (type "cifs")
                           (mount? #f)
                           (create-mount-point? #t))
                          (file-system
                           (device "//172.16.17.5/attach")
                           ;; (title 'device)
                           ;; (options "username=gregj,uid=1000,gid=998,credentials=/home/gregj/.config/.smbfile,user")
                           (options "username=gregj,uid=1000,gid=998,domain=domain,user,rw,mfsymlinks,noauto")
                           (mount-point "/data/attach")
                           (type "cifs")
                           (mount? #f)
                           (create-mount-point? #t))

                          ;; (setuid-programs (cons (file-append cifs-utils "/sbin/mount.cifs")
                          ;;                        %setuid-programs))


                          (file-system
                           (device (file-system-label "EFI"))
                           (type "vfat")
                           (mount-point "/boot/efi"))
                          (file-system
                           (mount-point "/tmp")
                           (device "none")
                           (type "tmpfs")
                           (check? #f))
                          %base-file-systems)))
  #+end_src

* Profiles
** Developer - code
  #+begin_src scheme :tangle ~/.config/guix/manifests/code.scm :mkdirp yes
    ;; developer tools
    (specifications->manifest
     '(
       "gcc-toolchain"
       "cmake"
       "make"
       "file"
       "docker-cli"
       "curl"
       "virt-manager"
       "qemu"
       ))
  #+end_src

** Megillah
  #+begin_src scheme :tangle ~/.config/guix/manifests/megillah.scm
    ;; the whole dang thing
    (specifications->manifest
     '(
       "file"
       "docker-cli"
       "curl"
       "libvirt"
       "acpi"
       "aspell"
       "brightnessctl"
       "cowsay"
       "curl"
       ;; "emacs-desktop-environment"
       ;; "emacs-emacsql-sqlite3"
       ;; "emacs-sqlite"
       ;; "emacs-vterm"
       "espeak"
       "font-google-material-design-icons"
       "fortune-mod"
       "gnupg"
       "hicolor-icon-theme"
       "htop"
       "jq"
       "libnotify"
       "lm-sensors"
       "papirus-icon-theme"
       ;; "rbw"  ;; bitwarden cli
       ;; "slim" ;; alternative DM
       "speedtest-cli"
       "tree"
       ;; "ungoogled-chromium"
       "upower"
       "vim-guix-vim"
       "xdotool"
       "xev"
       "xmodmap"
       "xterm"
       "xwininfo"
       ))
  #+end_src
** Python AND R
   Python and R are beasts
  #+begin_src scheme :tangle ~/.config/guix/manifests/python.scm
    ;; Python and Jupyter goodies
    (specifications->manifest
     '(
       "python"
       "python-pip"
       "python-ipython"
       "python-pandas"
       ;; "python-google-api-client"
       "python-jupyter-server"
       ;; "python-google"
       "python-jupyterlab-widgets"
       "openssl"
       "r-openssl"
       "r"
       "gcc-toolchain"
       "gfortran-toolchain"
       "r-devtools" ; required for R kernel install in Jupyter
       "r-irkernel" ; required for R kernel install in Jupyter
       ))
  #+end_src
** Multimedia
   #+begin_src scheme :tangle ~/.config/guix/manifests/multimedia.scm
     ;; Video and audio editing and special players
     (specifications->manifest
      '(
        "vlc"
        "eom"
        "obs"
        "kdenlive"
        "pavucontrol"
       ))
   #+end_src

* Flatpak thangs
** Firefox - org.mozilla.firefox
  + I am using Firefox simply because Mozilla are supporting the flatpak distribution
    method.  Neither Google nor Microsoft (for Edge) are supporting it
  + Go to preferences to allow DRM content - otherwise there will be no audio on YouTube videos
** Discord - com.discordapp.Discord
** Slack - com.slack.Slack
** Signal Desktop - org.signal.Signal
** Spotify - com.spotify.Client
** Visual Studio Code - OSS - com.visualstudio.code-oss
** Zoom - us.zoom.Zoom
 + Run Zoom once, exit, then edit ~/.var/app/us.zoom.Zoom/config/zoomus.conf
   Set =enableMiniWindow=false=
 + Add MIME handler =x-scheme-handler/zoommtg=us.zoom.Zoom.desktop= to
   =~/.config/mimeapps.list=
* Binaries that are not packaged
  Some binaries for now will have to be downloaded and stored in my user directory.

  The intent of this section is to make the process repeatable and automated

** Kubectl
  Ref: [[https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/][Install and Set Up kubectl on Linux | Kubernetes]]

  #+begin_src bash :results output replace
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    # download sha256
    curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    # check binary - should report "OK"
    echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
    rm -vf kubectl.sha256
    chmod a+rx kubectl
    mv -v kubectl ~/bin/
  #+end_src

  #+RESULTS:
  :
  : kubectl: OK
  : removed 'kubectl.sha256'
  : copied 'kubectl' -> '/home/gregj/bin/kubectl'
  : removed 'kubectl'

** Helm
   #+begin_src bash
     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
     chmod 700 get_helm.sh
     HELM_INSTALL_DIR=~/bin ./get_helm.sh
     rm -v get_helm.sh
   #+end_src

** Azure CLI
  + ref: [[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=script][Install the Azure CLI on Linux | Microsoft Docs]]
  Unfortunately, this script cannot run without prompting.
  #+begin_src bash :results output replace
    # Install script uses python
    # curl https://azurecliprod.blob.core.windows.net/install | bash
  #+end_src

** Google Cloud CLI
   + ref: [[https://cloud.google.com/sdk/docs/install][Installing the gcloud CLI Â |Â  Google Cloud]]
   #+begin_src bash
     cd ~
     curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     tar xf google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     rm -v google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     echo 'export PATH=$PATH:~/google-cloud-sdk/bin' >> ~/.bashrc
   #+end_src
* Package info by profile
  #+name: all-profiles
  #+begin_src bash :results output table replace
    echo 'System /run/current-system/profile'
    for p in $(guix package --list-profiles); do
        pname=$(basename ${p})
        echo "${pname} ${p}"
    done
  #+end_src

  #+RESULTS: all-profiles
  | System        | /run/current-system/profile                 |
  | code          | /home/gregj/.guix-extra-profiles/code       |
  | megillah      | /home/gregj/.guix-extra-profiles/megillah   |
  | multimedia    | /home/gregj/.guix-extra-profiles/multimedia |
  | python        | /home/gregj/.guix-extra-profiles/python     |
  | current       | /home/gregj/.config/guix/current            |
  | .guix-profile | /home/gregj/.guix-profile                   |
