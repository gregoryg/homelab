* refs
  + [[https://willschenk.com/articles/2019/installing_guix_on_nuc/][Installing guix on IntelNUC]]
  + [[https://boilingsteam.com/i-love-arch-but-gnu-guix-is-my-new-distro/][I Love Arch, But GNU Guix Is My New Distro - Boiling Steam]]
  + [[https://felsoci.sk/blog/installing-python-modules-on-guix.html][Installing Python modules on Guix - Marek's blog]]
  + [[https://rednosehacker.com/taking-baby-steps-with-guix-4-the-manifests][Taking baby steps with Guix (4): the manifests â€” Red Nose Hacker]]
  + [[https://jeko.frama.io/en/index.html][Home - Guile Hacker Handbook]]
  +

* Flatpak
  Because some of the unsavory code I want to run may not be enthusiastically
  provided and maintained, I will make use of Flatpak on Guix to run things such as:
  + Steam
  + Zoom
  + Visual Studio Code
  + Microsoft Teams
  + Microsoft Edge
  + Signal Desktop
  + Discord
  + Slack

  To control where things are installed, we can add a bind mount to the key app install paths
  + System-wide path =/var/lib/flatpak=
  + Local path =~/.local/share/flatpak= (and maybe =~/.var/app=)

  Since I don't have much need for multi-user capability, I may as well use system-wide as
  the default on my systems.

  Add flathub:
  #+begin_src bash
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    # Optionally for local
    flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  #+end_src

* Guix Management
  Profiles throw a curve ball.  I think I would prefer to make very little use of them -
  so keep to the default profile almost exclusively.

  I haven't figured out yet if profiles can be safely used *additively* - like activate a
  whole Python environment when needed without losing access to the packages that I was
  already using

  OTOH, it appears judicious use of profiles can help make updates bearable by updating
  only the subset of things you care about at the moment rather than triggering recompiles
  and downloads of the entire system.

* Guix complete system to-dos [53%]
** TODO add cifs and nfs mounts to /etc/fstab
** DONE Bind mounts
** DONE figger it out re: libinput and tap-to-touch+scrolling
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:40]
:END:
   Tap to click
   2-finger tap right click
   other stuff too
** DONE compile albert or replace it with *rofi*
*** TODO Get Alt-space working on EXWM windows
      Or *any* key combo - try out
** DONE get notifications working (dunst)
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:42]
:END:
** DONE kubectl (just downloaded and moved to =.local/bin=
** TODO JupyterLab with R and Python kernels, pyTigerGraph etc
** DONE NOPASSWD sudo
** CANCELLED udev permissions so I can adjust backlight
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2022-01-29 Sat 08:43] \\
  Just started magically working :shrug:
:END:
** TODO Change rofi theme
** TODO Document and add method for updating =channels.scm=
   How do I get updated hashes for =.config/guix/channels.scm=?  Does it get updated when
   doing =guix reconfigure=??
** TODO Fix python environment for unread Gmail in polybar
** TODO CUPS and lpr

* System configuration

  #+begin_src scheme :tangle ~/config.scm
    (use-modules (gnu ) (nongnu packages linux))
    (use-modules (gnu packages xfce))
    (use-modules (gnu system)) ; for sudoers
    (use-modules (gnu packages emacs-xyz))
    (use-modules (gnu services ))
    (use-modules (gnu services networking))
    (use-modules (gnu packages emacs))
    (use-modules (gnu services docker))
    (use-modules (gnu services ssh ))
    (use-modules (gnu packages ssh))
    (use-modules (gnu packages compton))
    (use-modules (gnu packages gnome))
    (use-modules (gnu packages xdisorg));
                                            ;    (use-service-modules nix)
    (use-service-modules desktop networking ssh xorg)

    ;; wilschenk's odd thing I need to figure out: this-file
    (define this-file
      (local-file (basename (assoc-ref (current-source-location) 'filename))
                  "config.scm"))

    ;; define additional partitions and bind mounts
    (define data-drive
      (file-system
       (device (file-system-label "data"))
       (type "ext4")
       (mount-point "/data")))
    (define (%projects-bind-mount) "/data/projects")
    (define (%backgrounds-bind-mount) "/data/backgrounds")

    ;; fix up my touchpad for laptops
    (define %xorg-libinput-config
      "Section \"InputClass\"
      Identifier \"libinput touchpad gorto\"
      Driver \"libinput\"
      MatchDevicePath \"/dev/input/event*\"
      MatchIsTouchpad \"on\"

      Option \"NaturalScrolling\" \"on\"
      Option \"Tapping\" \"on\"
      # Option \"TappingDrag\" \"on\"
      Option \"DisableWhileTyping\" \"on\"
      Option \"MiddleEmulation\" \"on\"
      Option \"ScrollMethod\" \"twofinger\"
    EndSection
    # Section \"InputClass\"
    #   Identifier \"Keyboards\"
    #   Driver \"libinput\"
    #   MatchDevicePath \"/dev/input/event*\"
    #   MatchIsKeyboard \"on\"
    # EndSection
    ")

    ;;
    (define %my-desktop-services
      (modify-services %desktop-services
                       ;; Configure the substitute server for the Nonguix repo

                       ;; Suspend the machine when the laptop lid is closed
                       (elogind-service-type config =>
                                             (elogind-configuration (inherit config)
                                                                    (handle-lid-switch-external-power 'suspend)))

                       ;; Enable backlight control rules for users
                       ;; (udev-service-type config =>
                       ;;                    (udev-configuration (inherit config)
                       ;;                                        (rules (cons %backlight-udev-rule
                       ;;                                                     (udev-configuration-rules config)))))

                       ;; Add OpenVPN support to NetworkManager
                       (network-manager-service-type config =>
                                                     (network-manager-configuration (inherit config)
                                                                                    (vpn-plugins (list network-manager-openvpn))))))

    ;; the heart of the matter
    (operating-system
     (kernel linux)
     (locale "en_US.utf8")
     (host-name "camina")
     (timezone "America/Denver")
     (initrd-modules (append (list "vmd")
                             %base-initrd-modules))

     (keyboard-layout (keyboard-layout "us" "altgr-intl"))

     ;; This will be what is used on the target machine
     (bootloader (bootloader-configuration
                  (bootloader grub-efi-bootloader)
                  (timeout 1)
                  (targets (list "/boot/efi"))))

     ;; This is needed to create a bootable USB
     ;;(bootloader (bootloader-configuration
     ;;              (bootloader grub-bootloader)
     ;;              (target "/dev/sda")))

     (firmware (append (list iwlwifi-firmware)
                       %base-firmware))

     (sudoers-file
      (plain-file "sudoers"
                  (string-append (plain-file-content %sudoers-specification)
                                 (format #f "~a ALL = NOPASSWD: ALL~%"
                                         "gregj"
                                         ))))
     (users (cons* (user-account
                    (name "gregj")
                    (group "users")
                    (supplementary-groups '("wheel" "netdev" "audio" "lp" "video" "docker" "kvm"))
                    ;; TODO: Default to name?
                    (home-directory "/home/gregj"))
                   %base-user-accounts))

     ;; think about adding *all* packages here and breaking into profiles/manifests later
     (packages
      (append
       (list
        xfce
        emacs-exwm
        emacs-next
        picom
        upower
        xscreensaver
        (specification->package "nss-certs"))
       %base-packages))


     (services
      (append
       (list
        ;; Copy current config to /etc/config.scm
        (simple-service 'config-file etc-service-type
                        `(("config.scm" ,this-file)))
        (service gnome-desktop-service-type)
        (service openssh-service-type)
        ;; Enable the build service for Nix package manager
        ;;        (service nix-service-type)
        (service docker-service-type)
        (service libvirt-service-type
                 (libvirt-configuration
                  (unix-sock-group "libvirt")
                  (tls-port "16555")))

        (set-xorg-configuration
         (xorg-configuration
          (keyboard-layout keyboard-layout)
          (extra-config (list %xorg-libinput-config)))))
       %my-desktop-services
       ;; %desktop-services
       ))
     (swap-devices (list (swap-space (target (file-system-label "swap")))))
     ;; (file-system-label "swap")))
     (file-systems (cons* (file-system
                           (device (file-system-label "guix"))
                           (mount-point "/")
                           (type "ext4"))
                          ;; Not needed for bootable usb but needed for final system
                          (file-system
                           (device (file-system-label "guix-gnu"))
                           (mount-point "/gnu")
                           (type "xfs"))
                          data-drive
                          (file-system
                           (device (%projects-bind-mount))
                           (mount-point "/home/gregj/projects")
                           (type "none")
                           (flags '(bind-mount))
                           (dependencies (list data-drive)))
                          (file-system
                           (device (%backgrounds-bind-mount))
                           (mount-point "/home/gregj/backgrounds")
                           (type "none")
                           (flags '(bind-mount))
                           (dependencies (list data-drive)))
                          (file-system
                           (device (file-system-label "EFI"))
                           (type "vfat")
                           (mount-point "/boot/efi"))
                          (file-system
                           (mount-point "/tmp")
                           (device "none")
                           (type "tmpfs")
                           (check? #f))
                          %base-file-systems)))
  #+end_src
  #+begin_src scheme :tangle ~/.config/guix/manifests/code.scm :mkdirp yes
    ;; developer tools
    (specifications->manifest
     '(
      "gcc-toolchain"
      "make"
      "texinfo"
      "file"
      "python"
      "docker-cli"
      "curl"
      "virt-manager"
      ))
  #+end_src
