#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t broken-links:nil
#+options: c:nil creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t
#+options: todo:t |:t
#+title: README-guix
#+date: <2022-02-04 Fri>
#+author: Gregory Grubbs
#+email: gregory.grubbs@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.5.2)
#+cite_export:
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
#+property: header-args:bash :comments org :shebang #!/usr/bin/env bash :eval never-export
* refs
  + [[https://willschenk.com/articles/2019/installing_guix_on_nuc/][Installing guix on IntelNUC]]
  + [[https://boilingsteam.com/i-love-arch-but-gnu-guix-is-my-new-distro/][I Love Arch, But GNU Guix Is My New Distro - Boiling Steam]]
  + [[https://felsoci.sk/blog/installing-python-modules-on-guix.html][Installing Python modules on Guix - Marek's blog]]
  + [[https://rednosehacker.com/taking-baby-steps-with-guix-4-the-manifests][Taking baby steps with Guix (4): the manifests — Red Nose Hacker]]
  + [[https://jeko.frama.io/en/index.html][Home - Guile Hacker Handbook]]
  +

* Flatpak
  Because some of the unsavory code I want to run may not be enthusiastically
  provided and maintained, I will make use of Flatpak on Guix to run things such as:
  + Steam
  + Zoom
  + Visual Studio Code
  + Microsoft Teams
  + Microsoft Edge
  + Signal Desktop
  + Discord
  + Slack

  To control where things are installed, we can add a bind mount to the key app install paths
  + System-wide path =/var/lib/flatpak=
  + Local path =~/.local/share/flatpak= (and maybe =~/.var/app=)

  I have decided to use the =--user= installs

  Add flathub:
  #+begin_src bash
    sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    # Optionally for local
    flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  #+end_src

* Guix Management
  Profiles throw a curve ball.  I think I would prefer to make very little use of them -
  so keep to the default profile almost exclusively.

  I haven't figured out yet if profiles can be safely used *additively* - like activate a
  whole Python environment when needed without losing access to the packages that I was
  already using

  OTOH, it appears judicious use of profiles can help make updates bearable by updating
  only the subset of things you care about at the moment rather than triggering recompiles
  and downloads of the entire system.

* Guix complete system to-dos [93%]
** DONE Add cifs bind mounts
** DONE figger it out re: libinput and tap-to-touch+scrolling
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:40]
:END:
   Tap to click
   2-finger tap right click
   other stuff too
** DONE compile albert or replace it with *rofi*
*** DONE Get Alt-space working on EXWM windows
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-30 Sun 10:50]
:END:
      Or *any* key combo - try out
** DONE get notifications working (dunst)
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-01-29 Sat 08:42]
:END:
** DONE kubectl (just downloaded and moved to =~/bin=)
** DONE JupyterLab with R and Python kernels, pyTigerGraph etc
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 16:44]
   :END:
   Steps:
   1. Install all requisite R packages (into a profile, preferably)
      #+begin_src bash
        guix package -i r gcc-toolchain gfortran-toolchain r-devtools r-irkernel
      #+end_src
   2. Activate the profile, then use R REPL to install the kernel
      #+begin_src R
        IRkernel::installspec()
      #+end_src
   3. Fire up JupyterLab from that profile
      #+begin_src bash
        run-jupyterlab.sh
      #+end_src
** DONE NOPASSWD sudo
** CANCELLED udev permissions so I can adjust backlight
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2022-01-29 Sat 08:43] \\
  Just started magically working :shrug:
:END:
** DONE Change rofi theme
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:40]
   :END:
** TODO Document and add method for updating =channels.scm=
   How do I get updated hashes for =.config/guix/channels.scm=?  Does it get updated when
   doing =guix reconfigure=??
** DONE Fix python environment for unread Gmail in polybar
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:40]
   :END:
   Fix was to use =pip3=
** DONE CUPS and lpr
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 15:42]
   :END:
   + =lpstat -e= shows all available destinations
   +
** DONE ssh-agent for user session
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-04 Fri 18:02]
   :END:
   + have GDM start it?
** DONE Make special-install binaries repeatable
   :LOGBOOK:
   - State "DONE"       from "STARTED"    [2022-02-03 Thu 07:43]
   - State "STARTED"    from "TODO"       [2022-02-03 Thu 07:41]
   :END:
** DONE Set default US Keyboard layout (not altgr-intl)
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2022-02-03 Thu 07:41]
   :END:
   Simply omit the second parameter, i.e. =(keyboard-layout (keyboard-layout "us"))=
* System configuration

  file:../dotfiles/config.scm

* Profiles
** Developer - code
   [[file:~/projects/homelab/dotfiles/.config/guix/manifests/code.scm][code.scm]]
** Megillah
   [[file:~/projects/homelab/dotfiles/.config/guix/manifests/megillah.scm][megillah.scm]]
** Python AND R
   Python and R are beasts
   [[file:~/projects/homelab/dotfiles/.config/guix/manifests/python.scm][python.scm]]
** Multimedia
   [[file:~/projects/homelab/dotfiles/.config/guix/manifests/multimedia.scm][multimedia.scm]]
** Emacs
   [[file:~/projects/homelab/dotfiles/.config/guix/manifests/emacs.scm][emacs.scm]]

* Flatpak thangs
** Firefox - org.mozilla.firefox
  + I am using Firefox simply because Mozilla are supporting the flatpak distribution
    method.  Neither Google nor Microsoft (for Edge) are supporting it
  + Go to preferences to allow DRM content - otherwise there will be no audio on YouTube videos
** Discord - com.discordapp.Discord
** Slack - com.slack.Slack
** Signal Desktop - org.signal.Signal
** Spotify - com.spotify.Client
** Visual Studio Code - OSS - com.visualstudio.code-oss
** Zoom - us.zoom.Zoom
 + Run Zoom once, exit, then edit ~/.var/app/us.zoom.Zoom/config/zoomus.conf
   Set =enableMiniWindow=false=
 + Add MIME handler =x-scheme-handler/zoommtg=us.zoom.Zoom.desktop= to
   =~/.config/mimeapps.list=
* Binaries that are not packaged
  Some binaries for now will have to be downloaded and stored in my user directory.

  The intent of this section is to make the process repeatable and automated

** Kubectl
  Ref: [[https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/][Install and Set Up kubectl on Linux | Kubernetes]]

  #+begin_src bash :results output replace
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    # download sha256
    curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
    # check binary - should report "OK"
    echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
    rm -vf kubectl.sha256
    chmod a+rx kubectl
    mv -v kubectl ~/bin/
  #+end_src

  #+RESULTS:
  :
  : kubectl: OK
  : removed 'kubectl.sha256'
  : copied 'kubectl' -> '/home/gregj/bin/kubectl'
  : removed 'kubectl'

** Helm
   #+begin_src bash
     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
     chmod 700 get_helm.sh
     HELM_INSTALL_DIR=~/bin ./get_helm.sh
     rm -v get_helm.sh
   #+end_src

** Azure CLI
  + ref: [[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=script][Install the Azure CLI on Linux | Microsoft Docs]]
  Unfortunately, this script cannot run without prompting.
  #+begin_src bash :results output replace
    # Install script uses python
    # curl https://azurecliprod.blob.core.windows.net/install | bash
  #+end_src

** Google Cloud CLI
   + ref: [[https://cloud.google.com/sdk/docs/install][Installing the gcloud CLI  |  Google Cloud]]
   #+begin_src bash
     cd ~
     curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     tar xf google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     rm -v google-cloud-sdk-371.0.0-linux-x86_64.tar.gz
     echo 'export PATH=$PATH:~/google-cloud-sdk/bin' >> ~/.bashrc
   #+end_src
* Package info by profile
  #+name: all-profiles
  #+begin_src bash :results output table replace
    echo 'System /run/current-system/profile'
    for p in $(guix package --list-profiles); do
        pname=$(basename ${p})
        echo "${pname} ${p}"
    done
  #+end_src

  #+RESULTS: all-profiles
  | System        | /run/current-system/profile                 |
  | code          | /home/gregj/.guix-extra-profiles/code       |
  | megillah      | /home/gregj/.guix-extra-profiles/megillah   |
  | multimedia    | /home/gregj/.guix-extra-profiles/multimedia |
  | python        | /home/gregj/.guix-extra-profiles/python     |
  | current       | /home/gregj/.config/guix/current            |
  | .guix-profile | /home/gregj/.guix-profile                   |
