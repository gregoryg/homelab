{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4df3f637-6e2a-40f1-9d6a-06c2b09c0318",
   "metadata": {},
   "source": [
    "# Using PyTigerGraph with Jupyter Notebook\n",
    "\n",
    "First install `pyTigerGraph` using `pip` or `conda`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "annual-worth",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pyTigerGraph as tg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "precious-observation",
   "metadata": {},
   "outputs": [],
   "source": [
    "# host = \"http://medsales.34.106.148.222.nip.io:14240\"\n",
    "host       = \"http://protomolecule.magichome\" # must include the protocol http or https\n",
    "username   = \"tigergraph\"\n",
    "password   = \"Tigergraph\"\n",
    "graphName  = \"Northwind\" # leave blank to use Global\n",
    "restppPort = 30900       # default 9000\n",
    "gsPort     = 30240       # default 14240\n",
    "mysecret   = \"254irou1ff6018fcoffd0qo38r8gofru\"\n",
    "# First establish a basic connection using a secret.  Do *not* do this if you already have a token\n",
    "# host = \"http://34.106.148.222.nip.io\"\n",
    "# token=\"o4luvshk47rticuhqi0cdokiq739o8i9\"\n",
    "conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password)\n",
    "token = conn.getToken(mysecret, setToken=True, lifetime=None)\n",
    "\n",
    "# Next use the new token to establish a full access connection for use with GSQL\n",
    "\n",
    "conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password, apiToken=token[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "photographic-cross",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Reps',\n",
       " 'Customers',\n",
       " 'Orders',\n",
       " 'Products',\n",
       " 'Territories',\n",
       " 'Regions',\n",
       " 'Suppliers']"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.getVertexTypes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "dramatic-holmes",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- DIRECTED EDGE include(FROM Orders, TO Products, Quantity INT, UnitPrice DOUBLE, Discount DOUBLE, LineTotalNoDiscount DOUBLE, LineTotal DOUBLE) WITH REVERSE_EDGE=\"reverse_include\"\n",
      "\n",
      "- DIRECTED EDGE reverse_include(FROM Products, TO Orders, Quantity INT, UnitPrice DOUBLE, Discount DOUBLE, LineTotalNoDiscount DOUBLE, LineTotal DOUBLE) WITH REVERSE_EDGE=\"include\"\n",
      "\n",
      "- DIRECTED EDGE referredby(FROM Customers, TO Customers) WITH REVERSE_EDGE=\"reverse_referredby\"\n",
      "\n",
      "- DIRECTED EDGE reverse_referredby(FROM Customers, TO Customers) WITH REVERSE_EDGE=\"referredby\"\n",
      "\n",
      "- DIRECTED EDGE fulfill(FROM Reps, TO Orders) WITH REVERSE_EDGE=\"reverse_fulfill\"\n",
      "\n",
      "- DIRECTED EDGE reverse_fulfill(FROM Orders, TO Reps) WITH REVERSE_EDGE=\"fulfill\"\n",
      "\n",
      "- UNDIRECTED EDGE place(FROM Customers, TO Orders, CustomerID STRING, OrderID INT)\n",
      "\n",
      "- UNDIRECTED EDGE operate_in(FROM Reps, TO Territories)\n",
      "\n",
      "- UNDIRECTED EDGE located_in(FROM Territories, TO Regions)\n",
      "\n",
      "- UNDIRECTED EDGE rep_customer(FROM Reps, TO Customers)\n",
      "\n",
      "- DIRECTED EDGE provide(FROM Suppliers, TO Products) WITH REVERSE_EDGE=\"reverse_provide\"\n",
      "\n",
      "- DIRECTED EDGE reverse_provide(FROM Products, TO Suppliers) WITH REVERSE_EDGE=\"provide\"\n",
      "\n",
      "- DIRECTED EDGE deliver_within(FROM Suppliers, TO Regions) WITH REVERSE_EDGE=\"reverse_deliver_within\"\n",
      "\n",
      "- DIRECTED EDGE reverse_deliver_within(FROM Regions, TO Suppliers) WITH REVERSE_EDGE=\"deliver_within\"\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# conn.getVertexTypes()\n",
    "# conn.runInstalledQuery('floors')\n",
    "print(conn.gsql('show edge *', options=[]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ae0e0e5e-6367-4789-877f-c6df6960e29d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Using graph 'gort'\\nSuccessfully dropped jobs on the graph 'gort': [ohmyohmy].\""
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.gsql('''\n",
    "             USE GRAPH gort\n",
    "             DROP JOB ohmyohmy''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "51425b76-cf01-447c-b50e-fd7b52362fd9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Using graph 'gort'\\nSuccessfully created schema change jobs: [ohmyohmy].\""
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.gsql('''\n",
    "          USE GRAPH gort\n",
    "          create schema_change job ohmyohmy FOR GRAPH gort {\n",
    "          ADD VERTEX Shloop(PRIMARY_ID ID STRING);\n",
    "          }\n",
    "          ''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "89d18dc1-cd81-4b1f-9e9c-5d35e87e35cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Using graph 'gort'\\n\\nCurrent graph version 0\\nAborting Schema Change...\\nFor more info, please check log at node 'm1': /home/tigergraph/tigergraph/log/gsql/ERROR.20211202-011152.661\""
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conn.gsql('''USE GRAPH gort\n",
    "    RUN SCHEMA_CHANGE JOB ohmyohmy''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "cb52e4e8-27ff-452e-b41c-6d4bae496766",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- Graph AntiFraud(Transaction:v, User:v, Device_Token:v, Payment_Instrument:v, User_Transfer_Transaction:e, User_Transfer_Transaction_Rev:e, User_Recieve_Transaction:e, User_Recieve_Transaction_Rev:e, User_to_Device:e, User_to_Payment:e, User_Refer_User:e, User_Referred_By_User:e)\n",
      "- Graph CustExp(Account:v, Campaign:v, Contact:v, Lead:v, CampaignMember:v, Opportunity:v, Industry:v, LeadSource:v, belongs_to:e, reverse_belongs_to:e, converted:e, reverse_converted:e, is_active_as:e, reverse_is_active_as:e, is_part_of:e, reverse_is_part_of:e, Has_Role:e, reverse_Has_Role:e, Has:e, reverse_Has:e, Is_Driven_By:e, reverse_Is_Driven_By:e, is_connected_to:e, reverse_is_connected_to:e, belongs_to_industry:e, reverse_belongs_to_industry:e, created_by:e, reverse_created_by:e, is_from:e, reverse_is_from:e, comes_from:e, reverse_comes_from:e, comes_from_the:e, reverse_comes_from_the:e, is_for_the:e, reverse_is_for_the:e)\n",
      "- Graph Northwind(Reps:v, Customers:v, Orders:v, Products:v, Territories:v, Regions:v, Suppliers:v, include:e, reverse_include:e, referredby:e, reverse_referredby:e, fulfill:e, reverse_fulfill:e, place:e, operate_in:e, located_in:e, rep_customer:e, provide:e, reverse_provide:e, deliver_within:e, reverse_deliver_within:e)\n",
      "- Graph gort()\n"
     ]
    }
   ],
   "source": [
    "print(conn.gsql('show graph *', options=[]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15ef1c66-3f81-46cf-afe9-bacbb931fe2d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
