#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t broken-links:nil
#+options: c:nil creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t
#+options: todo:t |:t
#+title: exploring-algos
#+date: <2021-12-31 Fri>
#+author: Gregory Grubbs
#+email: gregory.grubbs@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.0.60 (Org mode 9.5.1)
#+cite_export:
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-bigblow-local.setup
#+PROPERTY: header-args:jupyter-python :pandoc t :async yes
* Jupyter in Org mode
  ref: [[https://sqrtminusone.xyz/posts/2021-05-01-org-python/][Replacing Jupyter Notebook with Org Mode]]

** Basic setup
   #+begin_src emacs-lisp
     (use-package jupyter :straight t) ; already in my init
     (with-eval-after-load 'org
       (org-babel-do-load-languages
        'org-babel-load-languages
        (append org-babel-load-languages
                '(
                  (clojure . t)
                  (http . t) ;; curl
                  (js . t)
                  (latex . t)
                  (jupyter . t)
                  (python . t)
                  (shell  . t)
                  (sql . t)
                  ))))
   #+end_src
** Test the basics

   + Test environment - refer to original article to set up venvs
   #+begin_src jupyter-python
    import sys
    sys.executable
   #+end_src


   + Test with or without session
   #+begin_src jupyter-python :results output :session hello
    print('Hello, world!')
   #+end_src

   #+begin_src jupyter-python :session py :async nil
     x = 'foo'
     y = 'bar'
     x + ' ' + y
   #+end_src


   + input requests go through the minibuffer!!

   #+begin_src jupyter-python
     name = input('Name: ')
     print(f'Hello, {name}!')
   #+end_src

   #+RESULTS:
   : 0 - 583ea7e0-f606-459b-bac9-240d44c1dc48

   + Image output
     #+begin_src jupyter-python
       import matplotlib.pyplot as plt
       fig, ax = plt.subplots()
       ax.plot([1, 2, 3, 4], [1, 4, 2, 3])
       pass
     #+end_src

     #+RESULTS:
     : # Out[2]:
     : [[file:./obipy-resources/FPfRFe.png]]

*** Tables from dataframes
    + text format with =:display plain=
       #+begin_src jupyter-python :display plain
         import pandas as pd
         pd.DataFrame({"a": [1,2], "b": [3,4]})
       #+end_src

       #+RESULTS:
       : # Out[3]:
       : #+BEGIN_EXAMPLE
       :   a  b
       :   0  1  3
       :   1  2  4
       : #+END_EXAMPLE

    + Table using the =tabulate= package
       #+begin_src jupyter-python :results output
         import pandas as pd
         import tabulate
         df = pd.DataFrame({"a": [1,2], "b": [3,4]})
         print(tabulate.tabulate(df, headers=df.columns, tablefmt="orgtbl"))
       #+end_src

       #+RESULTS:
       : |    |   a |   b |
       : |----+-----+-----|
       : |  0 |   1 |   3 |
       : |  1 |   2 |   4 |

       0 - 9d30f032-2f62-4b5b-99dd-8541cf8dbbf3

       0 - 28c91efd-00f8-4c62-a79a-81c9ab20ff65

    + Tables using pandoc
      #+begin_src jupyter-python :pandoc t :results table
        import pandas as pd
        df = pd.DataFrame({"a": [1, 2], "b": [3, 4]})
        df
      #+end_src

      #+RESULTS:
      : # Out[17]:
      : #+BEGIN_EXAMPLE
      :   a  b
      :   0  1  3
      :   1  2  4
      : #+END_EXAMPLE



* Environmental setup for notebook
  #+begin_src emacs-lisp
    (setq-local org-image-actual-width '(500))
    (setq ob-async-no-async-languages-alist '("python" "jupyter-python" "jupyter-julia" "jupyter-R"))
  #+end_src

  #+RESULTS:
  | python | jupyter-python | jupyter-julia | jupyter-R |

* Exploring Algorithms
** PageRank in Tigergraph

   Using TigerGraph schema-free public algorithms at TigerGraph's [[https://github.com/tigergraph/gsql-graph-algorithms][GSQL Graph Algorithms]] on
   GitHub

  #+begin_src jupyter-python
     import pandas as pd
     # Set up pyTigerGraph access
     import pyTigerGraph as tg

     # Prepare to pull our GSQL algorithms from GitHub
     import requests
     host       = "http://protomolecule.magichome" # must include the protocol http or https

    ,#+RESULTS:

     username   = "tigergraph"
     password   = "Tigergraph"
     restppPort = 9000       # default 9000
     gsPort     = 14240       # default 14240

     # graphName  = "Northwind" # leave blank to use Global
     # mysecret   = "7vcupj59t7p4ji9t0k3s72nm4bheilig"
     # token="4vsf41mpl57e6m19pf0c5q1eah6h6jm5"

     graphName = "Patents"
     mysecret = "iksujn9605n4ltklm012a6uiann87rrn"
     token = "15bg00akkb2ume2of295ld38h6ge9270"

     graphName = "social"
     mysecret = "ifn4pc4jnkktim9u80ahhvebkj38g71n"
     token = "9icvamj2undegsfc72e5uph8udj2f3nf"

     # First establish a basic connection using a secret.  Do *not* do this if you already have a token
     # conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password)
     # token = conn.getToken(mysecret, setToken=True, lifetime=None)[0]

     # Next use the new token to establish a full access connection for use with GSQL

     conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password, apiToken=token)
     # token
  #+end_src

  #+RESULTS:
  : # Out[18]:

  #+begin_src sql
    CREATE QUERY tg_pagerank (STRING v_type, STRING e_type,
     FLOAT max_change=0.001, INT max_iter=25, FLOAT damping=0.85, INT top_k = 100,
     BOOL print_accum = TRUE, STRING result_attr =  "", STRING file_path = "",
     BOOL display_edges = FALSE) {
    /*
     Compute the pageRank score for each vertex in the GRAPH
     In each iteration, compute a score for each vertex:
         score = (1-damping) + damping*sum(received scores FROM its neighbors).
     The pageRank algorithm stops when either of the following is true:
     a) it reaches max_iter iterations;
     b) the max score change for any vertex compared to the last iteration <= max_change.
     v_type: vertex types to traverse          print_accum: print JSON output
     e_type: edge types to traverse            result_attr: INT attr to store results to
     max_iter; max #iterations                 file_path: file to write CSV output to
     top_k: #top scores to output              display_edges: output edges for visualization
     max_change: max allowed change between iterations to achieve convergence
     damping: importance of traversal vs. random teleport

     This query supports only taking in a single edge for the time being (8/13/2020).
    ,*/
    TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
    HeapAccum<Vertex_Score>(top_k, score DESC) @@top_scores_heap;
    MaxAccum<FLOAT> @@max_diff = 9999;    # max score change in an iteration
    SumAccum<FLOAT> @sum_recvd_score = 0; # sum of scores each vertex receives FROM neighbors
    SumAccum<FLOAT> @sum_score = 1;           # initial score for every vertex is 1.
    SetAccum<EDGE> @@edge_set;             # list of all edges, if display is needed
    FILE f (file_path);

    # PageRank iterations
    Start = {v_type};                     # Start with all vertices of specified type(s)
    WHILE @@max_diff > max_change
        LIMIT max_iter DO
            @@max_diff = 0;
        V = SELECT s
        FROM Start:s -(e_type:e)-> v_type:t
        ACCUM
                t.@sum_recvd_score += s.@sum_score/(s.outdegree(e_type))
        POST-ACCUM
                s.@sum_score = (1.0-damping) + damping * s.@sum_recvd_score,
            s.@sum_recvd_score = 0,
            @@max_diff += abs(s.@sum_score - s.@sum_score');
    END; # END WHILE loop

    # Output
    IF file_path != "" THEN
        f.println("Vertex_ID", "PageRank");
    END;
    V = SELECT s
        FROM Start:s
        POST-ACCUM
            IF result_attr != "" THEN
                s.setAttr(result_attr, s.@sum_score)
            END,

        IF file_path != "" THEN
                f.println(s, s.@sum_score)
            END,

        IF print_accum THEN
                @@top_scores_heap += Vertex_Score(s, s.@sum_score)
            END;

    IF print_accum THEN
        PRINT @@top_scores_heap;
        IF display_edges THEN
            PRINT Start[Start.@sum_score];
        Start = SELECT s
                FROM Start:s -(e_type:e)-> v_type:t
                ACCUM @@edge_set += e;
            PRINT @@edge_set;
        END;
    END;
    }
  #+end_src

  #+begin_src jupyter-python :pandoc t :results value table :async no
    # Check PageRank for Reps - rep_order
    max_change    = 0.001     # default 0.001
    max_iter      = 25        # default 25
    damping       = 0.85      # default 0.85
    top_k         = 100       # default 100
    print_accum   = True      # default TRUE
    result_attr   = ""        # default ""
    file_path     = ""        # default ""
    display_edges = False     # default FALSE
    vtype = 'Reps'
    etype = 'rep_order'

    vtype = 'Application'
    etype = 'has_parent'

    vtype = "Person"
    etype = "Friend"
    pagerankj = conn.runInstalledQuery('tg_pagerank',
                                       params={'v_type': vtype,
                                               'max_iter': 25,
                                               'e_type': etype,
                                               'damping': damping,
                                               'top_k': top_k,
                                               'print_accum': print_accum,
                                               'result_attr': result_attr,
                                               'file_path': file_path,
                                               'display_edges': display_edges
                                              })
    pd.DataFrame(pagerankj[0]['@@top_scores_heap'])
  #+end_src

  #+RESULTS:
  #+begin_example
  # Out[21]:
  ,#+BEGIN_EXAMPLE
    Vertex_ID    score
    0       Ivy  1.00000
    1    Howard  1.00000
    2    George  1.00000
    3    Justin  1.00000
    4     Chase  1.00000
    5     Damon  1.00000
    6     Eddie  1.00000
    7     Fiona  0.21375
    8      Alex  0.15000
    9       Bob  0.15000
  ,#+END_EXAMPLE
  #+end_example


  #+begin_src jupyter-python
    conn.getVertexTypes()
  #+end_src


  #+begin_src jupyter-python :pandoc t :async yes
    # Check PageRank for Reps - rep_order
    max_change    = 0.001     # default 0.001
    max_iter      = 25        # default 25
    damping       = 0.85      # default 0.85
    top_k         = 100       # default 100
    print_accum   = True      # default TRUE
    result_attr   = ""        # default ""
    file_path     = ""        # default ""
    display_edges = False     # default FALSE
    vtype = 'Reps'
    etype = 'rep_order'

    vtype = 'Application'
    etype = 'has_parent'

    vtype = "Person"
    etype = "Friend"
    pagerankj = conn.runInstalledQuery('tg_pagerank',
                                       params={'v_type': vtype,
                                               'max_iter': 50,
                                               'e_type': etype,
                                               'damping': damping,
                                               'top_k': top_k,
                                               'print_accum': print_accum,
                                               'result_attr': result_attr,
                                               'file_path': file_path,
                                               'display_edges': display_edges
                                              })
    pd.DataFrame(pagerankj[0]['@@top_scores_heap'])
  #+end_src

*** Dudas

    Ok - here's something mystifying to me - there are only a few connected nodes in the graph - currently only these


    [[file:images/simple-friend-graph-01.png]]

    *Only* Bob, Chase, Alex, Fiona and Justin have friends.  Justin with two incoming
     edges and no outgoing edges, has a score of 1, as do *all* unconnected nodes.  It
     appears that this version of PageRank gives a score of 1 to all nodes with zero
     outdegree.

*** PageRank on larger graphs
    #+begin_src jupyter-python
      # Use Customer360
      graphName = "Customer360"
      mysecret = "q6g6qa738ufhnm4fqmu7pl60ik6jcrld"
      token = "7vib70gv06eaesnocp5u3tvgmgmg8e1a"
      # token = "9icvamj2undegsfc72e5uph8udj2f3nf"

      # First establish a basic connection using a secret.  Do *not* do this if you already have a token
      # conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password)
      # token = conn.getToken(mysecret, setToken=True, lifetime=None)[0]

      # Next use the new token to establish a full access connection for use with GSQL

      conn = tg.TigerGraphConnection(host=host, restppPort=restppPort, gsPort=gsPort, graphname=graphName, password=password, apiToken=token)
      # token
    #+end_src


    #+begin_src jupyter-python :pandoc t :results value table :async no
      # Check PageRank for Reps - rep_order
      max_change    = 0.001     # default 0.001
      max_iter      = 25        # default 25
      damping       = 0.85      # default 0.85
      top_k         = 100       # default 100
      print_accum   = True      # default TRUE
      result_attr   = ""        # default ""
      file_path     = ""        # default ""
      display_edges = False     # default FALSE

      vtype = "Profile"
      etype = "profile_friends"
      pagerankj = conn.runInstalledQuery('tg_pagerank',
                                         params={'v_type': vtype,
                                                 'max_iter': 50,
                                                 'e_type': etype,
                                                 'damping': damping,
                                                 'top_k': top_k,
                                                 'print_accum': print_accum,
                                                 'result_attr': result_attr,
                                                 'file_path': file_path,
                                                 'display_edges': display_edges
                                                })
      pd.DataFrame(pagerankj[0]['@@top_scores_heap'])
    #+end_src





    #+begin_src jupyter-python :pandoc t  :async no
      # conn.getVertexDataframe('Profile')
      conn.getVertexDataframeById('Profile', vertexIds=[8157, 4139, 3090])
    #+end_src
