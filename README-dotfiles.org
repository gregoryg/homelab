* Literate programming for dotfiles
  For the most part, I'm happy to keep static dotfiles periodically check in to a Git
  repository.

  But what about slight additions and modifications to files that are automatically
  generated by their applications?
* Modify automatically generated dotfiles for specific Applications
** Bash

   Just tangle this section

   We take the original =.bashrc= and append my changes by tangling the following code block

   #+begin_src bash :noweb yes :exports none :tangle ~/.bashrc
     <<original-bashrc()>>
     <<bash-additions>>
   #+end_src
   #+name: bash-additions
   #+begin_src bash
     export PATH=$PATH:~/bin:~/.local/bin
     # Eternal bash history.
     # ---------------------
     # Undocumented feature which sets the size to "unlimited".
     # http://stackoverflow.com/questions/9457233/unlimited-bash-history
     export HISTFILESIZE=
     export HISTSIZE=
     export HISTTIMEFORMAT="[%F %T] "
     # Change the file location because certain bash sessions truncate .bash_history file upon close.
     # http://superuser.com/questions/575479/bash-history-truncated-to-500-lines-on-each-login
     export HISTFILE=~/.bash_eternal_history
     # Force prompt to write history after every command.
     # http://superuser.com/questions/20900/bash-history-loss
     PROMPT_COMMAND="history -a; $PROMPT_COMMAND"

     # Helpful prompt format for local and TRAMP shells
     export PROMPT_DIRTRIM=2
     if [ -z "${SSH_CONNECTION}" ] ; then
         PS1="\u@\h \w $ "
     else
         PS1="/ssh:\u@\h \w $ "
     fi
     export PS1

     ## GJG stuff
     ## Set up Flatpak env vars
     export XDG_DATA_DIRS=$XDG_DATA_DIRS:/var/lib/flatpak/exports/share:/home/gregj/.local/share/flatpak/exports/share

     ## Set up Guix profiles if the exist

     for i in $(guix package --list-profiles); do
         echo $i
         . $i/etc/profile
         which cowsay
         echo
     done

     ## Use the lightweight bash-powerline
     export SYMBOL_GIT_BRANCH='î‚ '
     source ~/projects/coding/scripting/bash-powerline/bash-powerline.sh

     ## Additional aliases
     alias sudo='sudo ' # https://askubuntu.com/a/22043 - make aliases available in sudo
     alias vi=vim
     alias finger=pinky
     alias python=python3
     alias h='history 100'
     alias k='kubectl'
     alias kn='kubectl config set-context --current --namespace '
     alias kx='kubectl config get-contexts'
     alias yp='sudo zypper'

     ## Kubernetes completion
     source <(kubectl completion bash)
     complete -F __start_kubectl k

     ## Cowme - from gregoryg/homelab
     ~/bin/cowme

     # from https://emacs.stackexchange.com/a/59587/418
     # Open man page from shell in running Emacs session
     macsman() {
         emacsclient -e "(man \"$1\")"
     }
     alias man=macsman

     # On Ubuntu, I need to set the following variable for touchscreen scrolling to work in Firefox
     export MOZ_USE_XINPUT2=1
     source ~/bin/load-kubeconfigs.sh

     # For Java Swing applications on EXWM
     export _JAVA_AWT_WM_NONREPARENTING=1

     if [ -d /opt/spark/ ]; then
         export SPARK_HOME=/opt/spark
         export PATH=$PATH:$SPARK_HOME/bin
     fi
     export PATH=$PATH:~/.local/bin
     if [ -a /usr/local/conda/etc/profile.d/conda.sh ]; then
         . /usr/local/conda/etc/profile.d/conda.sh
     fi
   #+end_src

   #+name: original-bashrc
   #+begin_src bash :results output replace
     cat ~/.bashrc
   #+end_src
** ssh-agent

   We don't want to use =gnome-keyring= because we will be starting a user session on any
   number of window managers.  Solution: use =.profile=

   As with =.bashrc=, just tangle this section to add the requisite lines to =.profile.

   #+begin_src bash :noweb yes :exports none :tangle ~/.profile
     <<original-profile()>>
     <<profile-additions>>
   #+end_src
   #name: profile-additions
   #+begin_src bash
     # set ssh-agent please please please
     #
     # setup ssh-agent
     #
     # set environment variables if user's agent already exists
     ls /tmp/ssh-*/agent.* 2> /dev/null
     if [ $? -eq 0 ] && [ -z "$SSH_AUTH_SOCK" ] ; then
         export SSH_AUTH_SOCK=$(ls -l /tmp/ssh-*/agent.* 2> /dev/null | grep $(whoami) | awk '{print $9}')
         export SSH_AGENT_PID=$((`echo $SSH_AUTH_SOCK | cut -d. -f2` + 1))
     else
         unset SSH_AUTH_SOCK
         unset SSH_AGENT_PID
         eval `ssh-agent -s` > /dev/null
     fi

     # setup addition of keys when needed
     if [ -z "$SSH_TTY" ] ; then                     # if not using ssh
         ssh-add -l > /dev/null                        # check for keys
         if [ $? -ne 0 ] ; then
             alias ssh='ssh-add -l > /dev/null || ssh-add && unalias ssh ; ssh'
             if [ -f "/usr/lib/ssh/x11-ssh-askpass" ] ; then
                 SSH_ASKPASS="/usr/lib/ssh/x11-ssh-askpass" ; export SSH_ASKPASS
             fi
         fi
     fi
   #+end_src
   #name: original-profile
   #+begin_src bash
     cat ~/.profile
   #+end_src

** Mount special directories in =/etc/fstab=
   I use a mount point at =/data= both for very large files I don't want in my home
   directory and for frequently used and reused things like background images, Steam games
   directory and my coding projects.  These are mounted as bind mounts in my home
   directory and will work whether I have one partition to rule them all, a separate
   partition for =/data=, or an LVM logical volume mount.

   The following should be added to the end of =/etc/fstab= - I don't want to do it
   automatically, thus no TRAMP or sudo magic - just manually copy and paste

   #+begin_src bash :noweb yes :exports none :tangle /sudo::/etc/fstab-new
     <<original-fstab()>>
     <<fstab-additions>>
   #+end_src
   #+name: fstab-additions
   #+begin_src conf
     # Additional bind mounts for use in home directory - assumes /data exists
     # /dev/mapper/vgubuntu-data  /data	ext4	errors=remount-ro 0 1
     # /data/docker                              /var/lib/docker ext4    data=ordered,bind       0 1
     /data/projects			   /home/gregj/projects		   ext4   data-ordered,bind			0  2
     /data/backgrounds   /home/gregj/backgrounds ext4    data=ordered,bind   0 2

     # Handy noauto mounts from the NAS
     erebor.magichome://volume2/data-drive /data/testme nfs rsize=8192,wsize=8192,timeo=14,intr,noauto 0 0
     # erebor.magichome://volume1/archive /data/archive nfs rsize=8192,wsize=8192,timeo=14,intr,noauto 0 0
     erebor.magichome://volume3/ISOs /data/isos nfs rsize=8192,wsize=8192,timeo=14,intr,noauto     0 0
     //172.16.17.5/attach /data/attach   cifs        username=gregj,uid=1000,gid=100,domain=domain,user,rw,mfsymlinks,noauto 0 0
     //172.16.17.5/archive /data/archive   cifs      username=gregj,uid=1000,gid=100,domain=domain,user,rw,noauto 0 0
   #+end_src
   #+name: original-fstab
   #+begin_src bash :results output replace
     cat /etc/fstab
   #+end_src

** Polybar
   There's no need to tangle the config files for Polybar.  So we'll just link them and
   maintain the changes in this repo

   #+begin_src bash
     ln -s `pwd`/./dotfiles/.config/polybar ~/.config/
     sudo apt -y install polybar
   #+end_src

** Zoom
   On EXWM I do not want the mini-window to appear.  It become a small floating window
   that must be clicked on to maximize, and is much easier to navigate as a normal window
   using standard Emacs navigation.

   #+begin_src bash :results none
     sed -i.bak 's,enableMiniWindow.\+,enableMiniWindow=false,' ~/.config/zoomus.conf
   #+end_src
